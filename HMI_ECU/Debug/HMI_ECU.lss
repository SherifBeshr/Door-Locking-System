
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  000016ee  00001782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800148  00800148  0000186a  2**0
                  ALLOC
  3 .stab         00003ef4  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016be  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_3>
      10:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_6>
      1c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_7>
      20:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_8>
      24:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
      8a:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buzzer_fn>:
 * [Description]:
 * Function that count 60 seconds then tells CONTROL ECU that it finished count
 *------------------------------------------------------------------------------------------------------*/
void Buzzer_fn()
{
	++g_BuzzerTick;
      92:	80 91 48 01 	lds	r24, 0x0148
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 48 01 	sts	0x0148, r24
	/* Displays the main options on LCD */
	if(g_BuzzerTick == 8)
      9c:	80 91 48 01 	lds	r24, 0x0148
      a0:	88 30       	cpi	r24, 0x08	; 8
      a2:	09 f0       	breq	.+2      	; 0xa6 <Buzzer_fn+0x14>
      a4:	08 95       	ret
	{
		UART_sendByte(TIME_60_SEC);
      a6:	89 e1       	ldi	r24, 0x19	; 25
      a8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
      ac:	08 95       	ret

000000ae <pass_status>:
 * [Description]: Function that displays if two entries matched or no, if yes displays Saving password
 *------------------------------------------------------------------------------------------------------*/
uint8 pass_status(uint8 status)
{
	/* If password doesn't match displays Wrong password on LCD for 1 second and return UNMATCH */
	if(status == PASS_UNMATCH)
      ae:	83 31       	cpi	r24, 0x13	; 19
      b0:	21 f0       	breq	.+8      	; 0xba <pass_status+0xc>
		LCD_displayString("WRONG PASS!");
		_delay_ms(1000);
		return PASS_UNMATCH;
	}
	/* If password match displays Correct password and Saving Pass on LCD for 1 second and return MATCH */
	else if(status == PASS_MATCH)
      b2:	82 31       	cpi	r24, 0x12	; 18
      b4:	b9 f0       	breq	.+46     	; 0xe4 <pass_status+0x36>
		LCD_clearScreen();
		LCD_displayString("CORRECT PASS");
		LCD_displayStringRowColumn(1, 0, "Saving Pass");
		_delay_ms(1000);
		LCD_clearScreen();
		return PASS_MATCH;
      b6:	83 e1       	ldi	r24, 0x13	; 19
	}
	return PASS_UNMATCH;
}
      b8:	08 95       	ret
uint8 pass_status(uint8 status)
{
	/* If password doesn't match displays Wrong password on LCD for 1 second and return UNMATCH */
	if(status == PASS_UNMATCH)
	{
		LCD_clearScreen();
      ba:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("WRONG PASS!");
      be:	80 e6       	ldi	r24, 0x60	; 96
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	48 ec       	ldi	r20, 0xC8	; 200
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	ca 01       	movw	r24, r20
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <pass_status+0x22>
      d4:	2f 5f       	subi	r18, 0xFF	; 255
      d6:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d8:	87 e2       	ldi	r24, 0x27	; 39
      da:	20 31       	cpi	r18, 0x10	; 16
      dc:	38 07       	cpc	r19, r24
      de:	b9 f7       	brne	.-18     	; 0xce <pass_status+0x20>
		LCD_clearScreen();
		LCD_displayString("CORRECT PASS");
		LCD_displayStringRowColumn(1, 0, "Saving Pass");
		_delay_ms(1000);
		LCD_clearScreen();
		return PASS_MATCH;
      e0:	83 e1       	ldi	r24, 0x13	; 19
	}
	return PASS_UNMATCH;
}
      e2:	08 95       	ret
		return PASS_UNMATCH;
	}
	/* If password match displays Correct password and Saving Pass on LCD for 1 second and return MATCH */
	else if(status == PASS_MATCH)
	{
		LCD_clearScreen();
      e4:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("CORRECT PASS");
      e8:	8c e6       	ldi	r24, 0x6C	; 108
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Saving Pass");
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	49 e7       	ldi	r20, 0x79	; 121
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	48 ec       	ldi	r20, 0xC8	; 200
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	ca 01       	movw	r24, r20
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <pass_status+0x58>
     10a:	2f 5f       	subi	r18, 0xFF	; 255
     10c:	3f 4f       	sbci	r19, 0xFF	; 255
     10e:	87 e2       	ldi	r24, 0x27	; 39
     110:	20 31       	cpi	r18, 0x10	; 16
     112:	38 07       	cpc	r19, r24
     114:	b9 f7       	brne	.-18     	; 0x104 <pass_status+0x56>
		_delay_ms(1000);
		LCD_clearScreen();
     116:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
     11a:	82 e1       	ldi	r24, 0x12	; 18
     11c:	08 95       	ret

0000011e <openDoorTimer1>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function to count time fort the door opening, keeping still, and closing
 *------------------------------------------------------------------------------------------------------*/
void openDoorTimer1()
{
	++g_OpenDoorTick;
     11e:	80 91 49 01 	lds	r24, 0x0149
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 49 01 	sts	0x0149, r24
	if(g_OpenDoorTick == 2)											/* 15 Seconds Passed */
     128:	80 91 49 01 	lds	r24, 0x0149
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	f9 f0       	breq	.+62     	; 0x16e <openDoorTimer1+0x50>
		UART_sendByte(TIME_15_SEC);
		while(UART_receiveByte() != CONTROL_ECU_READY);
		LCD_clearScreen();
		LCD_displayString("Door Opened");
	}
	else if(g_OpenDoorTick == 3)
     130:	80 91 49 01 	lds	r24, 0x0149
     134:	83 30       	cpi	r24, 0x03	; 3
     136:	71 f1       	breq	.+92     	; 0x194 <openDoorTimer1+0x76>
		UART_sendByte(TIME_3_SEC);
		while(UART_receiveByte() != CONTROL_ECU_READY);
		LCD_clearScreen();
		LCD_displayString("Closing Door...");
	}
	else if(g_OpenDoorTick == 5)
     138:	80 91 49 01 	lds	r24, 0x0149
     13c:	85 30       	cpi	r24, 0x05	; 5
     13e:	09 f0       	breq	.+2      	; 0x142 <openDoorTimer1+0x24>
     140:	08 95       	ret
	{
		/* Send that 15 Seconds are counted to Control ECU */
		UART_sendByte(TIME_15_SEC);
     142:	85 e1       	ldi	r24, 0x15	; 21
     144:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
     148:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	e1 f7       	brne	.-8      	; 0x148 <openDoorTimer1+0x2a>
		g_OpenDoorTick = 0;										/* Resets ISR count */
     150:	10 92 49 01 	sts	0x0149, r1
		Timer_deinit(TIMER1_ID);								/* Stops timer */
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <Timer_deinit>
		LCD_clearScreen();
     15a:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("Door Closed");
     15e:	81 ea       	ldi	r24, 0xA1	; 161
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
		g_Timer_Flag = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 4a 01 	sts	0x014A, r24
     16c:	08 95       	ret
void openDoorTimer1()
{
	++g_OpenDoorTick;
	if(g_OpenDoorTick == 2)											/* 15 Seconds Passed */
	{
		Timer_SetCompareValue(TIMER1_ID, 23438);					/* Wait 3 Seconds Door Opened*/
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	6e e8       	ldi	r22, 0x8E	; 142
     172:	7b e5       	ldi	r23, 0x5B	; 91
     174:	0e 94 99 0a 	call	0x1532	; 0x1532 <Timer_SetCompareValue>
		UART_sendByte(TIME_15_SEC);
     178:	85 e1       	ldi	r24, 0x15	; 21
     17a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
     17e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     182:	80 31       	cpi	r24, 0x10	; 16
     184:	e1 f7       	brne	.-8      	; 0x17e <openDoorTimer1+0x60>
		LCD_clearScreen();
     186:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("Door Opened");
     18a:	85 e8       	ldi	r24, 0x85	; 133
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     192:	08 95       	ret
	}
	else if(g_OpenDoorTick == 3)
	{
		Timer_SetCompareValue(TIMER1_ID, 58594);					/* Wait 15 Seconds Closing Door */
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	62 ee       	ldi	r22, 0xE2	; 226
     198:	74 ee       	ldi	r23, 0xE4	; 228
     19a:	0e 94 99 0a 	call	0x1532	; 0x1532 <Timer_SetCompareValue>
		UART_sendByte(TIME_3_SEC);
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
     1a4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     1a8:	80 31       	cpi	r24, 0x10	; 16
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <openDoorTimer1+0x86>
		LCD_clearScreen();
     1ac:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("Closing Door...");
     1b0:	81 e9       	ldi	r24, 0x91	; 145
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     1b8:	08 95       	ret

000001ba <main_options>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the main options to select from and keeps looping if
 * a non available option is pressed
 *------------------------------------------------------------------------------------------------------*/
uint8 main_options(void)
{
     1ba:	1f 93       	push	r17
	uint8 key = 0;
	/* Displays the main options on LCD */
	LCD_clearScreen();
     1bc:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	LCD_displayString("+ : Change PASS ");
     1c0:	8d ea       	ldi	r24, 0xAD	; 173
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Open Door   ");
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	4e eb       	ldi	r20, 0xBE	; 190
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
	{
		/* Waits until keypad is pressed and save option in key variable*/
		key = KEYPAD_getPressedKey();
     1d4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     1d8:	18 2f       	mov	r17, r24
		/* Send key to Control ECU if only available option is pressed*/
		if(key == '+' || key == '-')
     1da:	8b 32       	cpi	r24, 0x2B	; 43
     1dc:	11 f0       	breq	.+4      	; 0x1e2 <main_options+0x28>
     1de:	8d 32       	cpi	r24, 0x2D	; 45
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <main_options+0x1a>
		{
			UART_sendByte(key);
     1e2:	81 2f       	mov	r24, r17
     1e4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
			return key;
		}
	}
	return key;
}
     1e8:	81 2f       	mov	r24, r17
     1ea:	1f 91       	pop	r17
     1ec:	08 95       	ret

000001ee <send_password>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays Enter password for checking password entry
 *------------------------------------------------------------------------------------------------------*/
void send_password(void)
{
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
	uint8 key = 0;
	/* Displays Enter PASS on LCD and and sends password with UART to Control ECU*/
	LCD_clearScreen();
     1f4:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	LCD_displayString("Enter PASS");
     1f8:	8f ec       	ldi	r24, 0xCF	; 207
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	48 ec       	ldi	r20, 0xC8	; 200
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	ca 01       	movw	r24, r20
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <send_password+0x1c>
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	3f 4f       	sbci	r19, 0xFF	; 255
     212:	83 e1       	ldi	r24, 0x13	; 19
     214:	28 38       	cpi	r18, 0x88	; 136
     216:	38 07       	cpc	r19, r24
     218:	b9 f7       	brne	.-18     	; 0x208 <send_password+0x1a>
	_delay_ms(500);
	LCD_moveCursor(1, 0);
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
     222:	c8 ec       	ldi	r28, 0xC8	; 200
     224:	d0 e0       	ldi	r29, 0x00	; 0
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
     226:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     22a:	18 2f       	mov	r17, r24
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
     22c:	8a 30       	cpi	r24, 0x0A	; 10
     22e:	c8 f0       	brcs	.+50     	; 0x262 <send_password+0x74>
     230:	8d 33       	cpi	r24, 0x3D	; 61
     232:	d1 f0       	breq	.+52     	; 0x268 <send_password+0x7a>
			UART_sendByte(key);
		/* Displays (*) if numbers are pressed as indicator that they are pressed successfully */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     234:	8a e2       	ldi	r24, 0x2A	; 42
     236:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	ce 01       	movw	r24, r28
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <send_password+0x52>
     244:	2f 5f       	subi	r18, 0xFF	; 255
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	89 e0       	ldi	r24, 0x09	; 9
     24a:	24 3c       	cpi	r18, 0xC4	; 196
     24c:	38 07       	cpc	r19, r24
     24e:	b9 f7       	brne	.-18     	; 0x23e <send_password+0x50>
	LCD_clearScreen();
	LCD_displayString("Enter PASS");
	_delay_ms(500);
	LCD_moveCursor(1, 0);
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
     250:	1d 33       	cpi	r17, 0x3D	; 61
     252:	49 f7       	brne	.-46     	; 0x226 <send_password+0x38>
		/* Delay between each key press to avoid repetition */
		_delay_ms(250);
	}
	if(key == '=')
	{
		UART_sendByte(key);
     254:	8d e3       	ldi	r24, 0x3D	; 61
     256:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
	}
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	08 95       	ret
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     262:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     266:	e6 cf       	rjmp	.-52     	; 0x234 <send_password+0x46>
     268:	8d e3       	ldi	r24, 0x3D	; 61
     26a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	e5 cf       	rjmp	.-54     	; 0x23e <send_password+0x50>

00000274 <pass_Enter_2>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for second entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_2(void)
{
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
	uint8 key = 0;
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	4a ed       	ldi	r20, 0xDA	; 218
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	4b ee       	ldi	r20, 0xEB	; 235
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
     29a:	c8 ec       	ldi	r28, 0xC8	; 200
     29c:	d0 e0       	ldi	r29, 0x00	; 0
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     29e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     2a2:	18 2f       	mov	r17, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     2a4:	8a 30       	cpi	r24, 0x0A	; 10
     2a6:	b0 f0       	brcs	.+44     	; 0x2d4 <pass_Enter_2+0x60>
     2a8:	8d 33       	cpi	r24, 0x3D	; 61
     2aa:	b9 f0       	breq	.+46     	; 0x2da <pass_Enter_2+0x66>
			UART_sendByte(key);
		/* Displays (*) each time a key is pressed */
		if(key != '=')
			LCD_displayCharacter('*');
     2ac:	8a e2       	ldi	r24, 0x2A	; 42
     2ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	ce 01       	movw	r24, r28
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <pass_Enter_2+0x44>
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	24 3c       	cpi	r18, 0xC4	; 196
     2c4:	38 07       	cpc	r19, r24
     2c6:	b9 f7       	brne	.-18     	; 0x2b6 <pass_Enter_2+0x42>
{
	uint8 key = 0;
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	while(key != '=')
     2c8:	1d 33       	cpi	r17, 0x3D	; 61
     2ca:	49 f7       	brne	.-46     	; 0x29e <pass_Enter_2+0x2a>
		if(key != '=')
			LCD_displayCharacter('*');
		/* Small delay between each key press  to avoid repetition*/
		_delay_ms(250);
	}
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	08 95       	ret
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     2d4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     2d8:	e9 cf       	rjmp	.-46     	; 0x2ac <pass_Enter_2+0x38>
     2da:	8d e3       	ldi	r24, 0x3D	; 61
     2dc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	e8 cf       	rjmp	.-48     	; 0x2b6 <pass_Enter_2+0x42>

000002e6 <pass_Enter_1>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for first entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_1(void)
{
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	4c ef       	ldi	r20, 0xFC	; 252
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	4b ee       	ldi	r20, 0xEB	; 235
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	48 ec       	ldi	r20, 0xC8	; 200
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	ca 01       	movw	r24, r20
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <pass_Enter_1+0x30>
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	8b e0       	ldi	r24, 0x0B	; 11
     320:	28 3b       	cpi	r18, 0xB8	; 184
     322:	38 07       	cpc	r19, r24
     324:	b9 f7       	brne	.-18     	; 0x314 <pass_Enter_1+0x2e>
     326:	c8 ec       	ldi	r28, 0xC8	; 200
     328:	d0 e0       	ldi	r29, 0x00	; 0
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     32a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     32e:	18 2f       	mov	r17, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     330:	8a 30       	cpi	r24, 0x0A	; 10
     332:	b0 f0       	brcs	.+44     	; 0x360 <pass_Enter_1+0x7a>
     334:	8d 33       	cpi	r24, 0x3D	; 61
     336:	b9 f0       	breq	.+46     	; 0x366 <pass_Enter_1+0x80>
			UART_sendByte(key);
		/* Displays (*) each time a key is pressed */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     338:	8a e2       	ldi	r24, 0x2A	; 42
     33a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	ce 01       	movw	r24, r28
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <pass_Enter_1+0x5e>
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	89 e0       	ldi	r24, 0x09	; 9
     34e:	24 3c       	cpi	r18, 0xC4	; 196
     350:	38 07       	cpc	r19, r24
     352:	b9 f7       	brne	.-18     	; 0x342 <pass_Enter_1+0x5c>
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
     354:	1d 33       	cpi	r17, 0x3D	; 61
     356:	49 f7       	brne	.-46     	; 0x32a <pass_Enter_1+0x44>
			LCD_displayCharacter('*');
		}
		/* Small delay between each key press  to avoid repetition*/
		_delay_ms(250);
	}
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     360:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     364:	e9 cf       	rjmp	.-46     	; 0x338 <pass_Enter_1+0x52>
     366:	8d e3       	ldi	r24, 0x3D	; 61
     368:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	e8 cf       	rjmp	.-48     	; 0x342 <pass_Enter_1+0x5c>

00000372 <openDoorMatch>:
 * [Description]: Function that displays status of the Door if opening or closing (If password matches),
 * and displays Wrong password (If password doesn't match)
 * then displays ALERT (If Maximum trials exceeded)
 *------------------------------------------------------------------------------------------------------*/
void openDoorMatch(Timer_ConfigType *Timer1)
{
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	7c 01       	movw	r14, r24
	/* Send to Control ECU that HMI is ready */
	UART_sendByte(HMI_ECU_READY);
     37e:	81 e1       	ldi	r24, 0x11	; 17
     380:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
	pass_matching = PASS_UNMATCH;
     384:	83 e1       	ldi	r24, 0x13	; 19
     386:	80 93 46 01 	sts	0x0146, r24
     38a:	c8 ec       	ldi	r28, 0xC8	; 200
     38c:	d0 e0       	ldi	r29, 0x00	; 0
 *------------------------------------------------------------------------------------------------------*/
void send_password(void)
{
	uint8 key = 0;
	/* Displays Enter PASS on LCD and and sends password with UART to Control ECU*/
	LCD_clearScreen();
     38e:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	LCD_displayString("Enter PASS");
     392:	8f ec       	ldi	r24, 0xCF	; 207
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	ce 01       	movw	r24, r28
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <openDoorMatch+0x2e>
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	83 e1       	ldi	r24, 0x13	; 19
     3aa:	28 38       	cpi	r18, 0x88	; 136
     3ac:	38 07       	cpc	r19, r24
     3ae:	b9 f7       	brne	.-18     	; 0x39e <openDoorMatch+0x2c>
	_delay_ms(500);
	LCD_moveCursor(1, 0);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
     3b8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     3bc:	18 2f       	mov	r17, r24
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
     3be:	8a 30       	cpi	r24, 0x0A	; 10
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <openDoorMatch+0x52>
     3c2:	4e c0       	rjmp	.+156    	; 0x460 <__stack+0x1>
     3c4:	8d 33       	cpi	r24, 0x3D	; 61
     3c6:	09 f4       	brne	.+2      	; 0x3ca <openDoorMatch+0x58>
     3c8:	4e c0       	rjmp	.+156    	; 0x466 <__stack+0x7>
			UART_sendByte(key);
		/* Displays (*) if numbers are pressed as indicator that they are pressed successfully */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     3ca:	8a e2       	ldi	r24, 0x2A	; 42
     3cc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <openDoorMatch+0x64>
     3da:	2f 5f       	subi	r18, 0xFF	; 255
     3dc:	3f 4f       	sbci	r19, 0xFF	; 255
     3de:	e9 e0       	ldi	r30, 0x09	; 9
     3e0:	24 3c       	cpi	r18, 0xC4	; 196
     3e2:	3e 07       	cpc	r19, r30
     3e4:	b9 f7       	brne	.-18     	; 0x3d4 <openDoorMatch+0x62>
	LCD_clearScreen();
	LCD_displayString("Enter PASS");
	_delay_ms(500);
	LCD_moveCursor(1, 0);
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
     3e6:	1d 33       	cpi	r17, 0x3D	; 61
     3e8:	39 f7       	brne	.-50     	; 0x3b8 <openDoorMatch+0x46>
		/* Delay between each key press to avoid repetition */
		_delay_ms(250);
	}
	if(key == '=')
	{
		UART_sendByte(key);
     3ea:	8d e3       	ldi	r24, 0x3D	; 61
     3ec:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <openDoorMatch+0x84>
     3fa:	2f 5f       	subi	r18, 0xFF	; 255
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	fb e0       	ldi	r31, 0x0B	; 11
     400:	28 3b       	cpi	r18, 0xB8	; 184
     402:	3f 07       	cpc	r19, r31
     404:	b9 f7       	brne	.-18     	; 0x3f4 <openDoorMatch+0x82>
	/* Keeps looping until password matches */
	while(pass_matching == PASS_UNMATCH)
	{
		send_password();											/* Send password function send to Control ECU */
		_delay_ms(300);
		pass_matching = UART_receiveByte();
     406:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     40a:	80 93 46 01 	sts	0x0146, r24

		if(pass_matching == PASS_UNMATCH)
     40e:	83 31       	cpi	r24, 0x13	; 19
     410:	71 f1       	breq	.+92     	; 0x46e <__stack+0xf>
				break;
			}
		}
		else
		{
			LCD_clearScreen();
     412:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
			LCD_displayString("OPENING...");
     416:	8b e3       	ldi	r24, 0x3B	; 59
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
			UART_sendByte(HMI_ECU_READY);								/* Tells MCU2 that MCU1 is ready */
     41e:	81 e1       	ldi	r24, 0x11	; 17
     420:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
			while(UART_receiveByte() != START_TIME_15_SEC);
     424:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     428:	86 31       	cpi	r24, 0x16	; 22
     42a:	e1 f7       	brne	.-8      	; 0x424 <openDoorMatch+0xb2>
			/* Starts Timer1 to count for 15 seconds door opening */
			Timer_setCallBack(TIMER1_ID, openDoorTimer1);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	6f e8       	ldi	r22, 0x8F	; 143
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0e 94 4d 0a 	call	0x149a	; 0x149a <Timer_setCallBack>
			Timer_init(Timer1);
     436:	c7 01       	movw	r24, r14
     438:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Timer_init>
			while(g_Timer_Flag == 0);
     43c:	80 91 4a 01 	lds	r24, 0x014A
     440:	88 23       	and	r24, r24
     442:	e1 f3       	breq	.-8      	; 0x43c <openDoorMatch+0xca>
			g_Timer_Flag = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 4a 01 	sts	0x014A, r24
{
	/* Send to Control ECU that HMI is ready */
	UART_sendByte(HMI_ECU_READY);
	pass_matching = PASS_UNMATCH;
	/* Keeps looping until password matches */
	while(pass_matching == PASS_UNMATCH)
     44a:	80 91 46 01 	lds	r24, 0x0146
     44e:	83 31       	cpi	r24, 0x13	; 19
     450:	09 f4       	brne	.+2      	; 0x454 <openDoorMatch+0xe2>
     452:	9d cf       	rjmp	.-198    	; 0x38e <openDoorMatch+0x1c>
			Timer_init(Timer1);
			while(g_Timer_Flag == 0);
			g_Timer_Flag = 1;
		}
	}
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     460:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     464:	b2 cf       	rjmp	.-156    	; 0x3ca <openDoorMatch+0x58>
     466:	8d e3       	ldi	r24, 0x3D	; 61
     468:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     46c:	b1 cf       	rjmp	.-158    	; 0x3d0 <openDoorMatch+0x5e>
		pass_matching = UART_receiveByte();

		if(pass_matching == PASS_UNMATCH)
		{
			/* If password doesn't match decrement the fail times */
			--g_fail_count;
     46e:	80 91 47 01 	lds	r24, 0x0147
     472:	81 50       	subi	r24, 0x01	; 1
     474:	80 93 47 01 	sts	0x0147, r24
			LCD_clearScreen();
     478:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
			/* Displays wrong password and the remaining fail times */
			LCD_displayString("Wrong Password");
     47c:	8e e0       	ldi	r24, 0x0E	; 14
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Trials Remain: ");
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	4d e1       	ldi	r20, 0x1D	; 29
     48a:	51 e0       	ldi	r21, 0x01	; 1
     48c:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
			LCD_intgerToString(g_fail_count);
     490:	80 91 47 01 	lds	r24, 0x0147
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_intgerToString>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	ce 01       	movw	r24, r28
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__stack+0x41>
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	8e e4       	ldi	r24, 0x4E	; 78
     4aa:	20 32       	cpi	r18, 0x20	; 32
     4ac:	38 07       	cpc	r19, r24
     4ae:	b9 f7       	brne	.-18     	; 0x49e <__stack+0x3f>
			_delay_ms(2000);
			UART_sendByte(HMI_ECU_READY);							/* Tells MCU2 that MCU1 is ready */
     4b0:	81 e1       	ldi	r24, 0x11	; 17
     4b2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
			/* Checks if Max fails reached to display ALERT */
			if(g_fail_count == 0)
     4b6:	80 91 47 01 	lds	r24, 0x0147
     4ba:	88 23       	and	r24, r24
     4bc:	31 f6       	brne	.-116    	; 0x44a <openDoorMatch+0xd8>
			{
				LCD_clearScreen();
     4be:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
				LCD_displayString("Alert Thief!!");
     4c2:	8d e2       	ldi	r24, 0x2D	; 45
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
				Timer1->Compare_value = 58594;						/*	Activate Buzzer 1 minute	*/
     4ca:	82 ee       	ldi	r24, 0xE2	; 226
     4cc:	94 ee       	ldi	r25, 0xE4	; 228
     4ce:	f7 01       	movw	r30, r14
     4d0:	93 83       	std	Z+3, r25	; 0x03
     4d2:	82 83       	std	Z+2, r24	; 0x02
				/* Starts Timer1 to count for 60 seconds */
				Timer_init(Timer1);
     4d4:	c7 01       	movw	r24, r14
     4d6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Timer_init>
				Timer_setCallBack(TIMER1_ID, Buzzer_fn);
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	69 e4       	ldi	r22, 0x49	; 73
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 4d 0a 	call	0x149a	; 0x149a <Timer_setCallBack>
				g_fail_count = MAX_FAIL_TRIALS;						/* Resets Max fail trials counter */
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 93 47 01 	sts	0x0147, r24
				while(UART_receiveByte() != CONTROL_ECU_READY);
     4ea:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     4ee:	80 31       	cpi	r24, 0x10	; 16
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__stack+0x8b>
     4f2:	b0 cf       	rjmp	.-160    	; 0x454 <openDoorMatch+0xe2>

000004f4 <changePassword>:
 * [Description]:
 * Function that sends old password to check. If password match sends new password,
 * if password doesn't match you have MAX_TRIALS to try password again then alert will be displayed
 *------------------------------------------------------------------------------------------------------*/
void changePassword(Timer_ConfigType *Timer1)
{
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	7c 01       	movw	r14, r24
	UART_sendByte(HMI_ECU_READY);
     500:	81 e1       	ldi	r24, 0x11	; 17
     502:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
	pass_matching = PASS_UNMATCH;
     506:	83 e1       	ldi	r24, 0x13	; 19
     508:	80 93 46 01 	sts	0x0146, r24
     50c:	c8 ec       	ldi	r28, 0xC8	; 200
     50e:	d0 e0       	ldi	r29, 0x00	; 0
 *------------------------------------------------------------------------------------------------------*/
void send_password(void)
{
	uint8 key = 0;
	/* Displays Enter PASS on LCD and and sends password with UART to Control ECU*/
	LCD_clearScreen();
     510:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	LCD_displayString("Enter PASS");
     514:	8f ec       	ldi	r24, 0xCF	; 207
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	ce 01       	movw	r24, r28
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <changePassword+0x2e>
     526:	2f 5f       	subi	r18, 0xFF	; 255
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	83 e1       	ldi	r24, 0x13	; 19
     52c:	28 38       	cpi	r18, 0x88	; 136
     52e:	38 07       	cpc	r19, r24
     530:	b9 f7       	brne	.-18     	; 0x520 <changePassword+0x2c>
	_delay_ms(500);
	LCD_moveCursor(1, 0);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
     53a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     53e:	18 2f       	mov	r17, r24
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
     540:	8a 30       	cpi	r24, 0x0A	; 10
     542:	08 f4       	brcc	.+2      	; 0x546 <changePassword+0x52>
     544:	65 c0       	rjmp	.+202    	; 0x610 <changePassword+0x11c>
     546:	8d 33       	cpi	r24, 0x3D	; 61
     548:	09 f4       	brne	.+2      	; 0x54c <changePassword+0x58>
     54a:	68 c0       	rjmp	.+208    	; 0x61c <changePassword+0x128>
			UART_sendByte(key);
		/* Displays (*) if numbers are pressed as indicator that they are pressed successfully */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     54c:	8a e2       	ldi	r24, 0x2A	; 42
     54e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <changePassword+0x64>
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	e9 e0       	ldi	r30, 0x09	; 9
     562:	24 3c       	cpi	r18, 0xC4	; 196
     564:	3e 07       	cpc	r19, r30
     566:	b9 f7       	brne	.-18     	; 0x556 <changePassword+0x62>
	LCD_clearScreen();
	LCD_displayString("Enter PASS");
	_delay_ms(500);
	LCD_moveCursor(1, 0);
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
     568:	1d 33       	cpi	r17, 0x3D	; 61
     56a:	39 f7       	brne	.-50     	; 0x53a <changePassword+0x46>
		/* Delay between each key press to avoid repetition */
		_delay_ms(250);
	}
	if(key == '=')
	{
		UART_sendByte(key);
     56c:	8d e3       	ldi	r24, 0x3D	; 61
     56e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	ce 01       	movw	r24, r28
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <changePassword+0x84>
     57c:	2f 5f       	subi	r18, 0xFF	; 255
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	fb e0       	ldi	r31, 0x0B	; 11
     582:	28 3b       	cpi	r18, 0xB8	; 184
     584:	3f 07       	cpc	r19, r31
     586:	b9 f7       	brne	.-18     	; 0x576 <changePassword+0x82>
	pass_matching = PASS_UNMATCH;
	while(pass_matching == PASS_UNMATCH)
	{
		send_password();											/* Send password function send to Control ECU */
		_delay_ms(300);
		pass_matching = UART_receiveByte();
     588:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     58c:	80 93 46 01 	sts	0x0146, r24

		if(pass_matching == PASS_UNMATCH)
     590:	83 31       	cpi	r24, 0x13	; 19
     592:	09 f4       	brne	.+2      	; 0x596 <changePassword+0xa2>
     594:	4b c0       	rjmp	.+150    	; 0x62c <changePassword+0x138>
/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for first entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_1(void)
{
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	4c ef       	ldi	r20, 0xFC	; 252
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	4b ee       	ldi	r20, 0xEB	; 235
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <changePassword+0xc8>
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	fb e0       	ldi	r31, 0x0B	; 11
     5c6:	28 3b       	cpi	r18, 0xB8	; 184
     5c8:	3f 07       	cpc	r19, r31
     5ca:	b9 f7       	brne	.-18     	; 0x5ba <changePassword+0xc6>
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     5cc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     5d0:	18 2f       	mov	r17, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     5d2:	8a 30       	cpi	r24, 0x0A	; 10
     5d4:	00 f1       	brcs	.+64     	; 0x616 <changePassword+0x122>
     5d6:	8d 33       	cpi	r24, 0x3D	; 61
     5d8:	29 f1       	breq	.+74     	; 0x624 <changePassword+0x130>
			UART_sendByte(key);
		/* Displays (*) each time a key is pressed */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     5da:	8a e2       	ldi	r24, 0x2A	; 42
     5dc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <changePassword+0xf2>
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	89 e0       	ldi	r24, 0x09	; 9
     5f0:	24 3c       	cpi	r18, 0xC4	; 196
     5f2:	38 07       	cpc	r19, r24
     5f4:	b9 f7       	brne	.-18     	; 0x5e4 <changePassword+0xf0>
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
     5f6:	1d 33       	cpi	r17, 0x3D	; 61
     5f8:	49 f7       	brne	.-46     	; 0x5cc <changePassword+0xd8>
 *------------------------------------------------------------------------------------------------------*/
void changePassword(Timer_ConfigType *Timer1)
{
	UART_sendByte(HMI_ECU_READY);
	pass_matching = PASS_UNMATCH;
	while(pass_matching == PASS_UNMATCH)
     5fa:	80 91 46 01 	lds	r24, 0x0146
     5fe:	83 31       	cpi	r24, 0x13	; 19
     600:	09 f4       	brne	.+2      	; 0x604 <changePassword+0x110>
     602:	86 cf       	rjmp	.-244    	; 0x510 <changePassword+0x1c>
		else
		{
			pass_Enter_1();
		}
	}
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	08 95       	ret
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     610:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     614:	9b cf       	rjmp	.-202    	; 0x54c <changePassword+0x58>
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     616:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     61a:	df cf       	rjmp	.-66     	; 0x5da <changePassword+0xe6>
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     61c:	8d e3       	ldi	r24, 0x3D	; 61
     61e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     622:	97 cf       	rjmp	.-210    	; 0x552 <changePassword+0x5e>
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     624:	8d e3       	ldi	r24, 0x3D	; 61
     626:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     62a:	da cf       	rjmp	.-76     	; 0x5e0 <changePassword+0xec>
		pass_matching = UART_receiveByte();

		if(pass_matching == PASS_UNMATCH)
		{
			/* If password doesn't match decrement the fail times */
			--g_fail_count;
     62c:	80 91 47 01 	lds	r24, 0x0147
     630:	81 50       	subi	r24, 0x01	; 1
     632:	80 93 47 01 	sts	0x0147, r24
			/* Displays wrong password and the remaining fail times */
			LCD_clearScreen();
     636:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
			LCD_displayString("Wrong Password");
     63a:	8e e0       	ldi	r24, 0x0E	; 14
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Trials Remain: ");
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	4d e1       	ldi	r20, 0x1D	; 29
     648:	51 e0       	ldi	r21, 0x01	; 1
     64a:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
			LCD_intgerToString(g_fail_count);
     64e:	80 91 47 01 	lds	r24, 0x0147
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_intgerToString>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	ce 01       	movw	r24, r28
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <changePassword+0x16a>
     662:	2f 5f       	subi	r18, 0xFF	; 255
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	8e e4       	ldi	r24, 0x4E	; 78
     668:	20 32       	cpi	r18, 0x20	; 32
     66a:	38 07       	cpc	r19, r24
     66c:	b9 f7       	brne	.-18     	; 0x65c <changePassword+0x168>
			_delay_ms(2000);
			UART_sendByte(HMI_ECU_READY);							/* Tells MCU2 that MCU1 is ready */
     66e:	81 e1       	ldi	r24, 0x11	; 17
     670:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
			/* Checks if Max fails reached to display ALERT */
			if(g_fail_count == 0)
     674:	80 91 47 01 	lds	r24, 0x0147
     678:	88 23       	and	r24, r24
     67a:	09 f0       	breq	.+2      	; 0x67e <changePassword+0x18a>
     67c:	be cf       	rjmp	.-132    	; 0x5fa <changePassword+0x106>
			{
				LCD_clearScreen();
     67e:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
				LCD_displayString("Alert Thief!!");
     682:	8d e2       	ldi	r24, 0x2D	; 45
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
				Timer1->Compare_value = 58594;						/*	Activate displaying ALERT 1 minute	*/
     68a:	82 ee       	ldi	r24, 0xE2	; 226
     68c:	94 ee       	ldi	r25, 0xE4	; 228
     68e:	f7 01       	movw	r30, r14
     690:	93 83       	std	Z+3, r25	; 0x03
     692:	82 83       	std	Z+2, r24	; 0x02
				Timer_init(Timer1);									/* Starts Timer1 to count for 60 seconds ALERT*/
     694:	c7 01       	movw	r24, r14
     696:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Timer_init>
				Timer_setCallBack(TIMER1_ID, Buzzer_fn);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	69 e4       	ldi	r22, 0x49	; 73
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 4d 0a 	call	0x149a	; 0x149a <Timer_setCallBack>
				g_fail_count = MAX_FAIL_TRIALS;
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	80 93 47 01 	sts	0x0147, r24
				while(UART_receiveByte() != CONTROL_ECU_READY);
     6aa:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     6ae:	80 31       	cpi	r24, 0x10	; 16
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <changePassword+0x1b6>
     6b2:	a8 cf       	rjmp	.-176    	; 0x604 <changePassword+0x110>

000006b4 <main>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Main function that initializes the LCD, Timer, UART and waits for other MCU to be ready
 *------------------------------------------------------------------------------------------------------*/
int main (void)
{
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	2f 97       	sbiw	r28, 0x0f	; 15
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
	/* LCD Initialization on PORTB */
	LCD_init();
     6d2:	0e 94 b1 07 	call	0xf62	; 0xf62 <LCD_init>
	 * time per cycle = 8MHz / 1024 = 128uS
	 * Cycles for 15 seconds = 15 / 0.000128 = 117,188 cycles
	 * 117,188 / 2 = 58594 (On two Cycles with compare mode)
	 */
	Timer_ConfigType Timer1;
	Timer1.Compare_value = 58594;
     6d6:	82 ee       	ldi	r24, 0xE2	; 226
     6d8:	94 ee       	ldi	r25, 0xE4	; 228
     6da:	9b 87       	std	Y+11, r25	; 0x0b
     6dc:	8a 87       	std	Y+10, r24	; 0x0a
	Timer1.Start_value = 0;
     6de:	19 86       	std	Y+9, r1	; 0x09
     6e0:	18 86       	std	Y+8, r1	; 0x08
	Timer1.Timer_Source = TIMER1_PRESCALAR_1024;
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	8e 87       	std	Y+14, r24	; 0x0e
	Timer1.Timer_mode = TIMER_COMPARE_MODE;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	8d 87       	std	Y+13, r24	; 0x0d
	Timer1.Timerx_ID = TIMER1_ID;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	8c 87       	std	Y+12, r24	; 0x0c
	 * 2- Data Bits : 8
	 * 3- Parity	: Disable
	 * 4- Stop Bits : 1
	 */
	UART_ConfigType UART_Config;
	UART_Config.BaudRate = Baud_9600;
     6ee:	80 e8       	ldi	r24, 0x80	; 128
     6f0:	95 e2       	ldi	r25, 0x25	; 37
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	ab 83       	std	Y+3, r26	; 0x03
     6fc:	bc 83       	std	Y+4, r27	; 0x04
	UART_Config.DataBits = Data_8;
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	8d 83       	std	Y+5, r24	; 0x05
	UART_Config.ParityMode = Parity_Disable;
     702:	1e 82       	std	Y+6, r1	; 0x06
	UART_Config.StopBits = StopBits_1;
     704:	1f 82       	std	Y+7, r1	; 0x07
	UART_init(&UART_Config);
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 a7 0a 	call	0x154e	; 0x154e <UART_init>

	/*	Waits Until the other MCU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
     70e:	81 e1       	ldi	r24, 0x11	; 17
     710:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
	while(UART_receiveByte() != CONTROL_ECU_READY){}
     714:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     718:	80 31       	cpi	r24, 0x10	; 16
     71a:	e1 f7       	brne	.-8      	; 0x714 <main+0x60>

	uint8 mainOptionKey = 0;									/* Variable that holds the mode '+' or '-' */

	SREG |= (1<<7);												/* Enables I-bit for timer */
     71c:	8f b7       	in	r24, 0x3f	; 63
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	8f bf       	out	0x3f, r24	; 63
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	c8 2e       	mov	r12, r24
     726:	d1 2c       	mov	r13, r1
     728:	cc 0e       	add	r12, r28
     72a:	dd 1e       	adc	r13, r29
     72c:	08 ec       	ldi	r16, 0xC8	; 200
     72e:	10 e0       	ldi	r17, 0x00	; 0

	/*******************************************SUPER LOOP*******************************************/
	for(;;)
	{
		/* Checks flag if it is the first time to use the system */
		if(g_FirstTime_flag == 0)
     730:	80 91 4b 01 	lds	r24, 0x014B
     734:	88 23       	and	r24, r24
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x86>
     738:	86 c0       	rjmp	.+268    	; 0x846 <main+0x192>
				pass_status(pass_matching);
			}
		}


		g_FirstTime_flag = 1;									/* Sets first time use flag to 1 to not enter again */
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 4b 01 	sts	0x014B, r24
 *------------------------------------------------------------------------------------------------------*/
uint8 main_options(void)
{
	uint8 key = 0;
	/* Displays the main options on LCD */
	LCD_clearScreen();
     740:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	LCD_displayString("+ : Change PASS ");
     744:	8d ea       	ldi	r24, 0xAD	; 173
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Open Door   ");
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	4e eb       	ldi	r20, 0xBE	; 190
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
	{
		/* Waits until keypad is pressed and save option in key variable*/
		key = KEYPAD_getPressedKey();
     758:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
		/* Send key to Control ECU if only available option is pressed*/
		if(key == '+' || key == '-')
     75c:	8b 32       	cpi	r24, 0x2B	; 43
     75e:	09 f4       	brne	.+2      	; 0x762 <main+0xae>
     760:	bb c0       	rjmp	.+374    	; 0x8d8 <main+0x224>
     762:	8d 32       	cpi	r24, 0x2D	; 45
     764:	c9 f7       	brne	.-14     	; 0x758 <main+0xa4>
		{
			UART_sendByte(key);
     766:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>

		/* Variable that holds the mode '+' or '-' */
		mainOptionKey = main_options();
		if(mainOptionKey == '-')								/* Open Door mode */
		{
			openDoorMatch(&Timer1);
     76a:	c6 01       	movw	r24, r12
     76c:	0e 94 b9 01 	call	0x372	; 0x372 <openDoorMatch>
     770:	df cf       	rjmp	.-66     	; 0x730 <main+0x7c>
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     772:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     776:	f8 2e       	mov	r15, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     778:	89 e0       	ldi	r24, 0x09	; 9
     77a:	8f 15       	cp	r24, r15
     77c:	08 f0       	brcs	.+2      	; 0x780 <main+0xcc>
     77e:	8a c0       	rjmp	.+276    	; 0x894 <main+0x1e0>
     780:	8d e3       	ldi	r24, 0x3D	; 61
     782:	f8 16       	cp	r15, r24
     784:	09 f4       	brne	.+2      	; 0x788 <main+0xd4>
     786:	92 c0       	rjmp	.+292    	; 0x8ac <main+0x1f8>
			UART_sendByte(key);
		/* Displays (*) each time a key is pressed */
		if(key != '=')
		{
			LCD_displayCharacter('*');
     788:	8a e2       	ldi	r24, 0x2A	; 42
     78a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	c8 01       	movw	r24, r16
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <main+0xe0>
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	89 e0       	ldi	r24, 0x09	; 9
     79e:	24 3c       	cpi	r18, 0xC4	; 196
     7a0:	38 07       	cpc	r19, r24
     7a2:	b9 f7       	brne	.-18     	; 0x792 <main+0xde>
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
     7a4:	8d e3       	ldi	r24, 0x3D	; 61
     7a6:	f8 16       	cp	r15, r24
     7a8:	21 f7       	brne	.-56     	; 0x772 <main+0xbe>
 * [Description]: Function that displays the keys pressed for second entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_2(void)
{
	uint8 key = 0;
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	4a ed       	ldi	r20, 0xDA	; 218
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	4b ee       	ldi	r20, 0xEB	; 235
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     7ca:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     7ce:	f8 2e       	mov	r15, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     7d0:	89 e0       	ldi	r24, 0x09	; 9
     7d2:	8f 15       	cp	r24, r15
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <main+0x124>
     7d6:	62 c0       	rjmp	.+196    	; 0x89c <main+0x1e8>
     7d8:	8d e3       	ldi	r24, 0x3D	; 61
     7da:	f8 16       	cp	r15, r24
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <main+0x12c>
     7de:	62 c0       	rjmp	.+196    	; 0x8a4 <main+0x1f0>
			UART_sendByte(key);
		/* Displays (*) each time a key is pressed */
		if(key != '=')
			LCD_displayCharacter('*');
     7e0:	8a e2       	ldi	r24, 0x2A	; 42
     7e2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCD_displayCharacter>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	c8 01       	movw	r24, r16
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <main+0x138>
     7f0:	2f 5f       	subi	r18, 0xFF	; 255
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	89 e0       	ldi	r24, 0x09	; 9
     7f6:	24 3c       	cpi	r18, 0xC4	; 196
     7f8:	38 07       	cpc	r19, r24
     7fa:	b9 f7       	brne	.-18     	; 0x7ea <main+0x136>
{
	uint8 key = 0;
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	while(key != '=')
     7fc:	8d e3       	ldi	r24, 0x3D	; 61
     7fe:	f8 16       	cp	r15, r24
     800:	21 f7       	brne	.-56     	; 0x7ca <main+0x116>
			/* Keeps entering new password until it matches first and second time */
			while(pass_matching == PASS_UNMATCH)
			{
				pass_Enter_1();
				pass_Enter_2();
				pass_matching = UART_receiveByte();
     802:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <UART_receiveByte>
     806:	80 93 46 01 	sts	0x0146, r24
 * [Description]: Function that displays if two entries matched or no, if yes displays Saving password
 *------------------------------------------------------------------------------------------------------*/
uint8 pass_status(uint8 status)
{
	/* If password doesn't match displays Wrong password on LCD for 1 second and return UNMATCH */
	if(status == PASS_UNMATCH)
     80a:	83 31       	cpi	r24, 0x13	; 19
     80c:	09 f4       	brne	.+2      	; 0x810 <main+0x15c>
     80e:	52 c0       	rjmp	.+164    	; 0x8b4 <main+0x200>
		LCD_displayString("WRONG PASS!");
		_delay_ms(1000);
		return PASS_UNMATCH;
	}
	/* If password match displays Correct password and Saving Pass on LCD for 1 second and return MATCH */
	else if(status == PASS_MATCH)
     810:	82 31       	cpi	r24, 0x12	; 18
     812:	c9 f4       	brne	.+50     	; 0x846 <main+0x192>
	{
		LCD_clearScreen();
     814:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("CORRECT PASS");
     818:	8c e6       	ldi	r24, 0x6C	; 108
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Saving Pass");
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	49 e7       	ldi	r20, 0x79	; 121
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	c8 01       	movw	r24, r16
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <main+0x17e>
     836:	2f 5f       	subi	r18, 0xFF	; 255
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	87 e2       	ldi	r24, 0x27	; 39
     83c:	20 31       	cpi	r18, 0x10	; 16
     83e:	38 07       	cpc	r19, r24
     840:	b9 f7       	brne	.-18     	; 0x830 <main+0x17c>
		_delay_ms(1000);
		LCD_clearScreen();
     842:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
	{
		/* Checks flag if it is the first time to use the system */
		if(g_FirstTime_flag == 0)
		{
			/* Keeps entering new password until it matches first and second time */
			while(pass_matching == PASS_UNMATCH)
     846:	80 91 46 01 	lds	r24, 0x0146
     84a:	83 31       	cpi	r24, 0x13	; 19
     84c:	09 f0       	breq	.+2      	; 0x850 <main+0x19c>
     84e:	75 cf       	rjmp	.-278    	; 0x73a <main+0x86>
/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for first entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_1(void)
{
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	4c ef       	ldi	r20, 0xFC	; 252
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	4b ee       	ldi	r20, 0xEB	; 235
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	0e 94 37 08 	call	0x106e	; 0x106e <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_moveCursor>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	c8 01       	movw	r24, r16
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <main+0x1c2>
     87a:	2f 5f       	subi	r18, 0xFF	; 255
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	8b e0       	ldi	r24, 0x0B	; 11
     880:	28 3b       	cpi	r18, 0xB8	; 184
     882:	38 07       	cpc	r19, r24
     884:	b9 f7       	brne	.-18     	; 0x874 <main+0x1c0>
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     886:	0e 94 c5 05 	call	0xb8a	; 0xb8a <KEYPAD_getPressedKey>
     88a:	f8 2e       	mov	r15, r24
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     88c:	89 e0       	ldi	r24, 0x09	; 9
     88e:	8f 15       	cp	r24, r15
     890:	08 f4       	brcc	.+2      	; 0x894 <main+0x1e0>
     892:	76 cf       	rjmp	.-276    	; 0x780 <main+0xcc>
			UART_sendByte(key);
     894:	8f 2d       	mov	r24, r15
     896:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     89a:	76 cf       	rjmp	.-276    	; 0x788 <main+0xd4>
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     89c:	8f 2d       	mov	r24, r15
     89e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     8a2:	9e cf       	rjmp	.-196    	; 0x7e0 <main+0x12c>
     8a4:	8d e3       	ldi	r24, 0x3D	; 61
     8a6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     8aa:	9d cf       	rjmp	.-198    	; 0x7e6 <main+0x132>
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
			UART_sendByte(key);
     8ac:	8d e3       	ldi	r24, 0x3D	; 61
     8ae:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
     8b2:	6d cf       	rjmp	.-294    	; 0x78e <main+0xda>
uint8 pass_status(uint8 status)
{
	/* If password doesn't match displays Wrong password on LCD for 1 second and return UNMATCH */
	if(status == PASS_UNMATCH)
	{
		LCD_clearScreen();
     8b4:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCD_clearScreen>
		LCD_displayString("WRONG PASS!");
     8b8:	80 e6       	ldi	r24, 0x60	; 96
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_displayString>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	c8 01       	movw	r24, r16
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <main+0x212>
     8ca:	2f 5f       	subi	r18, 0xFF	; 255
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	87 e2       	ldi	r24, 0x27	; 39
     8d0:	20 31       	cpi	r18, 0x10	; 16
     8d2:	38 07       	cpc	r19, r24
     8d4:	b9 f7       	brne	.-18     	; 0x8c4 <main+0x210>
     8d6:	b7 cf       	rjmp	.-146    	; 0x846 <main+0x192>
		/* Waits until keypad is pressed and save option in key variable*/
		key = KEYPAD_getPressedKey();
		/* Send key to Control ECU if only available option is pressed*/
		if(key == '+' || key == '-')
		{
			UART_sendByte(key);
     8d8:	8b e2       	ldi	r24, 0x2B	; 43
     8da:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <UART_sendByte>
		{
			openDoorMatch(&Timer1);
		}
		else if(mainOptionKey == '+')							/* Change Password mode */
		{
			changePassword(&Timer1);
     8de:	c6 01       	movw	r24, r12
     8e0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <changePassword>
     8e4:	25 cf       	rjmp	.-438    	; 0x730 <main+0x7c>

000008e6 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     8e6:	68 30       	cpi	r22, 0x08	; 8
     8e8:	50 f4       	brcc	.+20     	; 0x8fe <GPIO_setupPinDirection+0x18>
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	40 f4       	brcc	.+16     	; 0x8fe <GPIO_setupPinDirection+0x18>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	29 f1       	breq	.+74     	; 0x93c <GPIO_setupPinDirection+0x56>
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	28 f0       	brcs	.+10     	; 0x900 <GPIO_setupPinDirection+0x1a>
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	79 f1       	breq	.+94     	; 0x958 <GPIO_setupPinDirection+0x72>
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	81 f0       	breq	.+32     	; 0x91e <GPIO_setupPinDirection+0x38>
     8fe:	08 95       	ret
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     900:	41 30       	cpi	r20, 0x01	; 1
     902:	09 f4       	brne	.+2      	; 0x906 <GPIO_setupPinDirection+0x20>
     904:	4d c0       	rjmp	.+154    	; 0x9a0 <GPIO_setupPinDirection+0xba>
			{
				SET_BIT(DDRA,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     906:	2a b3       	in	r18, 0x1a	; 26
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <GPIO_setupPinDirection+0x2c>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	6a 95       	dec	r22
     914:	e2 f7       	brpl	.-8      	; 0x90e <GPIO_setupPinDirection+0x28>
     916:	80 95       	com	r24
     918:	82 23       	and	r24, r18
     91a:	8a bb       	out	0x1a, r24	; 26
     91c:	08 95       	ret
			{
				CLEAR_BIT(DDRC,pin_num);
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     91e:	41 30       	cpi	r20, 0x01	; 1
     920:	09 f4       	brne	.+2      	; 0x924 <GPIO_setupPinDirection+0x3e>
     922:	49 c0       	rjmp	.+146    	; 0x9b6 <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     924:	21 b3       	in	r18, 0x11	; 17
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <GPIO_setupPinDirection+0x4a>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	6a 95       	dec	r22
     932:	e2 f7       	brpl	.-8      	; 0x92c <GPIO_setupPinDirection+0x46>
     934:	80 95       	com	r24
     936:	82 23       	and	r24, r18
     938:	81 bb       	out	0x11, r24	; 17
     93a:	08 95       	ret
			{
				CLEAR_BIT(DDRA,pin_num);
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     93c:	41 30       	cpi	r20, 0x01	; 1
     93e:	29 f1       	breq	.+74     	; 0x98a <GPIO_setupPinDirection+0xa4>
			{
				SET_BIT(DDRB,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     940:	27 b3       	in	r18, 0x17	; 23
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <GPIO_setupPinDirection+0x66>
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	6a 95       	dec	r22
     94e:	e2 f7       	brpl	.-8      	; 0x948 <GPIO_setupPinDirection+0x62>
     950:	80 95       	com	r24
     952:	82 23       	and	r24, r18
     954:	87 bb       	out	0x17, r24	; 23
     956:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     958:	41 30       	cpi	r20, 0x01	; 1
     95a:	61 f0       	breq	.+24     	; 0x974 <GPIO_setupPinDirection+0x8e>
			{
				SET_BIT(DDRC,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     95c:	24 b3       	in	r18, 0x14	; 20
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <GPIO_setupPinDirection+0x82>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <GPIO_setupPinDirection+0x7e>
     96c:	80 95       	com	r24
     96e:	82 23       	and	r24, r18
     970:	84 bb       	out	0x14, r24	; 20
     972:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
			{
				SET_BIT(DDRC,pin_num);
     974:	24 b3       	in	r18, 0x14	; 20
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <GPIO_setupPinDirection+0x9a>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	6a 95       	dec	r22
     982:	e2 f7       	brpl	.-8      	; 0x97c <GPIO_setupPinDirection+0x96>
     984:	28 2b       	or	r18, r24
     986:	24 bb       	out	0x14, r18	; 20
     988:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
			{
				SET_BIT(DDRB,pin_num);
     98a:	27 b3       	in	r18, 0x17	; 23
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <GPIO_setupPinDirection+0xb0>
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	6a 95       	dec	r22
     998:	e2 f7       	brpl	.-8      	; 0x992 <GPIO_setupPinDirection+0xac>
     99a:	28 2b       	or	r18, r24
     99c:	27 bb       	out	0x17, r18	; 23
     99e:	08 95       	ret
		switch (port_num)
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
			{
				SET_BIT(DDRA,pin_num);
     9a0:	2a b3       	in	r18, 0x1a	; 26
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <GPIO_setupPinDirection+0xc6>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	6a 95       	dec	r22
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <GPIO_setupPinDirection+0xc2>
     9b0:	28 2b       	or	r18, r24
     9b2:	2a bb       	out	0x1a, r18	; 26
     9b4:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
			{
				SET_BIT(DDRD,pin_num);
     9b6:	21 b3       	in	r18, 0x11	; 17
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <GPIO_setupPinDirection+0xdc>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <GPIO_setupPinDirection+0xd8>
     9c6:	28 2b       	or	r18, r24
     9c8:	21 bb       	out	0x11, r18	; 17
     9ca:	08 95       	ret

000009cc <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     9cc:	68 30       	cpi	r22, 0x08	; 8
     9ce:	50 f4       	brcc	.+20     	; 0x9e4 <GPIO_writePin+0x18>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	40 f4       	brcc	.+16     	; 0x9e4 <GPIO_writePin+0x18>
		/* Do Nothing */
	}
	else
	{
		 /* Write the pin value as required */
		switch (port_num)
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	29 f1       	breq	.+74     	; 0xa22 <GPIO_writePin+0x56>
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	28 f0       	brcs	.+10     	; 0x9e6 <GPIO_writePin+0x1a>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	79 f1       	breq	.+94     	; 0xa3e <GPIO_writePin+0x72>
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	81 f0       	breq	.+32     	; 0xa04 <GPIO_writePin+0x38>
     9e4:	08 95       	ret
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
     9e6:	41 30       	cpi	r20, 0x01	; 1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <GPIO_writePin+0x20>
     9ea:	4d c0       	rjmp	.+154    	; 0xa86 <GPIO_writePin+0xba>
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     9ec:	2b b3       	in	r18, 0x1b	; 27
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <GPIO_writePin+0x2c>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	6a 95       	dec	r22
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <GPIO_writePin+0x28>
     9fc:	80 95       	com	r24
     9fe:	82 23       	and	r24, r18
     a00:	8b bb       	out	0x1b, r24	; 27
     a02:	08 95       	ret
			{
				CLEAR_BIT(PORTC,pin_num);
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
     a04:	41 30       	cpi	r20, 0x01	; 1
     a06:	09 f4       	brne	.+2      	; 0xa0a <GPIO_writePin+0x3e>
     a08:	49 c0       	rjmp	.+146    	; 0xa9c <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     a0a:	22 b3       	in	r18, 0x12	; 18
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <GPIO_writePin+0x4a>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	6a 95       	dec	r22
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <GPIO_writePin+0x46>
     a1a:	80 95       	com	r24
     a1c:	82 23       	and	r24, r18
     a1e:	82 bb       	out	0x12, r24	; 18
     a20:	08 95       	ret
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
     a22:	41 30       	cpi	r20, 0x01	; 1
     a24:	29 f1       	breq	.+74     	; 0xa70 <GPIO_writePin+0xa4>
			{
				SET_BIT(PORTB,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     a26:	28 b3       	in	r18, 0x18	; 24
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <GPIO_writePin+0x66>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	6a 95       	dec	r22
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <GPIO_writePin+0x62>
     a36:	80 95       	com	r24
     a38:	82 23       	and	r24, r18
     a3a:	88 bb       	out	0x18, r24	; 24
     a3c:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
     a3e:	41 30       	cpi	r20, 0x01	; 1
     a40:	61 f0       	breq	.+24     	; 0xa5a <GPIO_writePin+0x8e>
			{
				SET_BIT(PORTC,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     a42:	25 b3       	in	r18, 0x15	; 21
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <GPIO_writePin+0x82>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	6a 95       	dec	r22
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <GPIO_writePin+0x7e>
     a52:	80 95       	com	r24
     a54:	82 23       	and	r24, r18
     a56:	85 bb       	out	0x15, r24	; 21
     a58:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
			{
				SET_BIT(PORTC,pin_num);
     a5a:	25 b3       	in	r18, 0x15	; 21
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <GPIO_writePin+0x9a>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	6a 95       	dec	r22
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <GPIO_writePin+0x96>
     a6a:	28 2b       	or	r18, r24
     a6c:	25 bb       	out	0x15, r18	; 21
     a6e:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
			{
				SET_BIT(PORTB,pin_num);
     a70:	28 b3       	in	r18, 0x18	; 24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <GPIO_writePin+0xb0>
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <GPIO_writePin+0xac>
     a80:	28 2b       	or	r18, r24
     a82:	28 bb       	out	0x18, r18	; 24
     a84:	08 95       	ret
		switch (port_num)
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
     a86:	2b b3       	in	r18, 0x1b	; 27
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <GPIO_writePin+0xc6>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	6a 95       	dec	r22
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <GPIO_writePin+0xc2>
     a96:	28 2b       	or	r18, r24
     a98:	2b bb       	out	0x1b, r18	; 27
     a9a:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
			{
				SET_BIT(PORTD,pin_num);
     a9c:	22 b3       	in	r18, 0x12	; 18
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <GPIO_writePin+0xdc>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	6a 95       	dec	r22
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <GPIO_writePin+0xd8>
     aac:	28 2b       	or	r18, r24
     aae:	22 bb       	out	0x12, r18	; 18
     ab0:	08 95       	ret

00000ab2 <GPIO_readPin>:
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 pin_value = LOGIC_LOW;

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ab2:	68 30       	cpi	r22, 0x08	; 8
     ab4:	50 f4       	brcc	.+20     	; 0xaca <GPIO_readPin+0x18>
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	40 f4       	brcc	.+16     	; 0xaca <GPIO_readPin+0x18>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	d1 f0       	breq	.+52     	; 0xaf2 <GPIO_readPin+0x40>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	30 f0       	brcs	.+12     	; 0xace <GPIO_readPin+0x1c>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	f9 f0       	breq	.+62     	; 0xb04 <GPIO_readPin+0x52>
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	59 f0       	breq	.+22     	; 0xae0 <GPIO_readPin+0x2e>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
     aca:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		}
	}
	return pin_value;
}
     acc:	08 95       	ret
	{
		/* Read the pin value as required */
		switch (port_num)
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num))
     ace:	89 b3       	in	r24, 0x19	; 25
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <GPIO_readPin+0x26>
     ad4:	95 95       	asr	r25
     ad6:	87 95       	ror	r24
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <GPIO_readPin+0x22>
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
     ae0:	80 b3       	in	r24, 0x10	; 16
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <GPIO_readPin+0x38>
     ae6:	95 95       	asr	r25
     ae8:	87 95       	ror	r24
     aea:	6a 95       	dec	r22
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <GPIO_readPin+0x34>
     aee:	81 70       	andi	r24, 0x01	; 1
     af0:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
     af2:	86 b3       	in	r24, 0x16	; 22
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <GPIO_readPin+0x4a>
     af8:	95 95       	asr	r25
     afa:	87 95       	ror	r24
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <GPIO_readPin+0x46>
     b00:	81 70       	andi	r24, 0x01	; 1
     b02:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
     b04:	83 b3       	in	r24, 0x13	; 19
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <GPIO_readPin+0x5c>
     b0a:	95 95       	asr	r25
     b0c:	87 95       	ror	r24
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <GPIO_readPin+0x58>
     b12:	81 70       	andi	r24, 0x01	; 1
     b14:	08 95       	ret

00000b16 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	40 f4       	brcc	.+16     	; 0xb2a <GPIO_setupPortDirection+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	49 f0       	breq	.+18     	; 0xb30 <GPIO_setupPortDirection+0x1a>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	28 f0       	brcs	.+10     	; 0xb2c <GPIO_setupPortDirection+0x16>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	49 f0       	breq	.+18     	; 0xb38 <GPIO_setupPortDirection+0x22>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	29 f0       	breq	.+10     	; 0xb34 <GPIO_setupPortDirection+0x1e>
     b2a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
     b2c:	6a bb       	out	0x1a, r22	; 26
     b2e:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
     b30:	67 bb       	out	0x17, r22	; 23
     b32:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
			break;
		case PORTD_ID:
			DDRD = direction;
     b34:	61 bb       	out	0x11, r22	; 17
     b36:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
			break;
		case PORTC_ID:
			DDRC = direction;
     b38:	64 bb       	out	0x14, r22	; 20
     b3a:	08 95       	ret

00000b3c <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	40 f4       	brcc	.+16     	; 0xb50 <GPIO_writePort+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch (port_num)
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	49 f0       	breq	.+18     	; 0xb56 <GPIO_writePort+0x1a>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	28 f0       	brcs	.+10     	; 0xb52 <GPIO_writePort+0x16>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	49 f0       	breq	.+18     	; 0xb5e <GPIO_writePort+0x22>
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	29 f0       	breq	.+10     	; 0xb5a <GPIO_writePort+0x1e>
     b50:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
     b52:	6b bb       	out	0x1b, r22	; 27
     b54:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
     b56:	68 bb       	out	0x18, r22	; 24
     b58:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
			break;
		case PORTD_ID:
			PORTD = value;
     b5a:	62 bb       	out	0x12, r22	; 18
     b5c:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
			break;
		case PORTC_ID:
			PORTC = value;
     b5e:	65 bb       	out	0x15, r22	; 21
     b60:	08 95       	ret

00000b62 <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	40 f4       	brcc	.+16     	; 0xb76 <GPIO_readPort+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch (port_num)
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	51 f0       	breq	.+20     	; 0xb7e <GPIO_readPort+0x1c>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	30 f0       	brcs	.+12     	; 0xb7a <GPIO_readPort+0x18>
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	51 f0       	breq	.+20     	; 0xb86 <GPIO_readPort+0x24>
     b72:	83 30       	cpi	r24, 0x03	; 3
     b74:	31 f0       	breq	.+12     	; 0xb82 <GPIO_readPort+0x20>
			break;
		case PORTC_ID:
			value = PINC;
			break;
		case PORTD_ID:
			value = PIND;
     b76:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
     b78:	08 95       	ret
	{
		/* Read the port value as required */
		switch (port_num)
		{
		case PORTA_ID:
			value = PINA;
     b7a:	89 b3       	in	r24, 0x19	; 25
     b7c:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
     b7e:	86 b3       	in	r24, 0x16	; 22
     b80:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
			break;
		case PORTD_ID:
			value = PIND;
     b82:	80 b3       	in	r24, 0x10	; 16
     b84:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
			break;
		case PORTC_ID:
			value = PINC;
     b86:	83 b3       	in	r24, 0x13	; 19
     b88:	08 95       	ret

00000b8a <KEYPAD_getPressedKey>:
/***************************************************************************************************
 *                                		Function Definitions                                  	   *
 ***************************************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	00 e0       	ldi	r16, 0x00	; 0
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);
     b96:	c1 e0       	ldi	r28, 0x01	; 1
     b98:	d0 e0       	ldi	r29, 0x00	; 0
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <KEYPAD_getPressedKey+0x48>

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 59 05 	call	0xab2	; 0xab2 <GPIO_readPin>
     ba4:	88 23       	and	r24, r24
     ba6:	09 f4       	brne	.+2      	; 0xbaa <KEYPAD_getPressedKey+0x20>
     ba8:	53 c0       	rjmp	.+166    	; 0xc50 <KEYPAD_getPressedKey+0xc6>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	0e 94 59 05 	call	0xab2	; 0xab2 <GPIO_readPin>
     bb2:	88 23       	and	r24, r24
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <KEYPAD_getPressedKey+0x2e>
     bb6:	55 c0       	rjmp	.+170    	; 0xc62 <KEYPAD_getPressedKey+0xd8>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	63 e0       	ldi	r22, 0x03	; 3
     bbc:	0e 94 59 05 	call	0xab2	; 0xab2 <GPIO_readPin>
     bc0:	88 23       	and	r24, r24
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <KEYPAD_getPressedKey+0x3c>
     bc4:	50 c0       	rjmp	.+160    	; 0xc66 <KEYPAD_getPressedKey+0xdc>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while (1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; ++col) /* loop for columns */
     bc6:	1f 5f       	subi	r17, 0xFF	; 255
     bc8:	14 30       	cpi	r17, 0x04	; 4
     bca:	08 f4       	brcc	.+2      	; 0xbce <KEYPAD_getPressedKey+0x44>
     bcc:	72 c0       	rjmp	.+228    	; 0xcb2 <KEYPAD_getPressedKey+0x128>
     bce:	10 e0       	ldi	r17, 0x00	; 0
     bd0:	00 e0       	ldi	r16, 0x00	; 0
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin.
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	0e 94 8b 05 	call	0xb16	; 0xb16 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID + col, PIN_OUTPUT);
     bda:	61 2f       	mov	r22, r17
     bdc:	6c 5f       	subi	r22, 0xFC	; 252
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <GPIO_setupPinDirection>
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);
     be6:	61 2f       	mov	r22, r17
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	6c 5f       	subi	r22, 0xFC	; 252
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	ce 01       	movw	r24, r28
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <KEYPAD_getPressedKey+0x6c>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	6a 95       	dec	r22
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <KEYPAD_getPressedKey+0x68>
     bfa:	bc 01       	movw	r22, r24
     bfc:	60 95       	com	r22
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	0e 94 59 05 	call	0xab2	; 0xab2 <GPIO_readPin>
     c0c:	88 23       	and	r24, r24
     c0e:	31 f6       	brne	.-116    	; 0xb9c <KEYPAD_getPressedKey+0x12>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     c10:	0f 5f       	subi	r16, 0xFF	; 255
     c12:	88 0f       	add	r24, r24
     c14:	88 0f       	add	r24, r24
     c16:	80 0f       	add	r24, r16
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     c18:	88 30       	cpi	r24, 0x08	; 8
     c1a:	09 f1       	breq	.+66     	; 0xc5e <KEYPAD_getPressedKey+0xd4>
     c1c:	89 30       	cpi	r24, 0x09	; 9
     c1e:	70 f0       	brcs	.+28     	; 0xc3c <KEYPAD_getPressedKey+0xb2>
     c20:	8c 30       	cpi	r24, 0x0C	; 12
     c22:	b9 f1       	breq	.+110    	; 0xc92 <KEYPAD_getPressedKey+0x108>
     c24:	8d 30       	cpi	r24, 0x0D	; 13
     c26:	08 f5       	brcc	.+66     	; 0xc6a <KEYPAD_getPressedKey+0xe0>
     c28:	8a 30       	cpi	r24, 0x0A	; 10
     c2a:	89 f1       	breq	.+98     	; 0xc8e <KEYPAD_getPressedKey+0x104>
     c2c:	8b 30       	cpi	r24, 0x0B	; 11
     c2e:	68 f1       	brcs	.+90     	; 0xc8a <KEYPAD_getPressedKey+0x100>
     c30:	83 e0       	ldi	r24, 0x03	; 3
#endif
				}
			}
		}
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	59 f1       	breq	.+86     	; 0xc96 <KEYPAD_getPressedKey+0x10c>
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	d8 f0       	brcs	.+54     	; 0xc7a <KEYPAD_getPressedKey+0xf0>
     c44:	86 30       	cpi	r24, 0x06	; 6
     c46:	99 f1       	breq	.+102    	; 0xcae <KEYPAD_getPressedKey+0x124>
     c48:	87 30       	cpi	r24, 0x07	; 7
     c4a:	78 f1       	brcs	.+94     	; 0xcaa <KEYPAD_getPressedKey+0x120>
     c4c:	86 e0       	ldi	r24, 0x06	; 6
     c4e:	f1 cf       	rjmp	.-30     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     c50:	81 e0       	ldi	r24, 0x01	; 1
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     c52:	0f 5f       	subi	r16, 0xFF	; 255
     c54:	88 0f       	add	r24, r24
     c56:	88 0f       	add	r24, r24
     c58:	80 0f       	add	r24, r16
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     c5a:	88 30       	cpi	r24, 0x08	; 8
     c5c:	f9 f6       	brne	.-66     	; 0xc1c <KEYPAD_getPressedKey+0x92>
     c5e:	8a e2       	ldi	r24, 0x2A	; 42
     c60:	e8 cf       	rjmp	.-48     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	d5 cf       	rjmp	.-86     	; 0xc10 <KEYPAD_getPressedKey+0x86>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	d3 cf       	rjmp	.-90     	; 0xc10 <KEYPAD_getPressedKey+0x86>
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     c6a:	8f 30       	cpi	r24, 0x0F	; 15
     c6c:	e1 f0       	breq	.+56     	; 0xca6 <KEYPAD_getPressedKey+0x11c>
     c6e:	80 31       	cpi	r24, 0x10	; 16
     c70:	c1 f0       	breq	.+48     	; 0xca2 <KEYPAD_getPressedKey+0x118>
     c72:	8e 30       	cpi	r24, 0x0E	; 14
     c74:	f1 f6       	brne	.-68     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	dc cf       	rjmp	.-72     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	81 f0       	breq	.+32     	; 0xc9e <KEYPAD_getPressedKey+0x114>
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	60 f4       	brcc	.+24     	; 0xc9a <KEYPAD_getPressedKey+0x110>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	b1 f6       	brne	.-84     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c86:	87 e0       	ldi	r24, 0x07	; 7
     c88:	d4 cf       	rjmp	.-88     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	d2 cf       	rjmp	.-92     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	d0 cf       	rjmp	.-96     	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c92:	8d e2       	ldi	r24, 0x2D	; 45
     c94:	ce cf       	rjmp	.-100    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c96:	85 e2       	ldi	r24, 0x25	; 37
     c98:	cc cf       	rjmp	.-104    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	ca cf       	rjmp	.-108    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     c9e:	88 e0       	ldi	r24, 0x08	; 8
     ca0:	c8 cf       	rjmp	.-112    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     ca2:	8b e2       	ldi	r24, 0x2B	; 43
     ca4:	c6 cf       	rjmp	.-116    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     ca6:	8d e3       	ldi	r24, 0x3D	; 61
     ca8:	c4 cf       	rjmp	.-120    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	c2 cf       	rjmp	.-124    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
     cae:	85 e0       	ldi	r24, 0x05	; 5
     cb0:	c0 cf       	rjmp	.-128    	; 0xc32 <KEYPAD_getPressedKey+0xa8>
/***************************************************************************************************
 *                                		Function Definitions                                  	   *
 ***************************************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     cb2:	01 2f       	mov	r16, r17
     cb4:	8e cf       	rjmp	.-228    	; 0xbd2 <KEYPAD_getPressedKey+0x48>

00000cb6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	f8 2e       	mov	r15, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     cd2:	00 ed       	ldi	r16, 0xD0	; 208
     cd4:	17 e0       	ldi	r17, 0x07	; 7
     cd6:	c8 01       	movw	r24, r16
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <LCD_displayCharacter+0x22>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     ce6:	c8 01       	movw	r24, r16
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <LCD_displayCharacter+0x32>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	6f 2d       	mov	r22, r15
     cf0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     cf4:	c8 01       	movw	r24, r16
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCD_displayCharacter+0x40>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     d04:	c8 01       	movw	r24, r16
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_displayCharacter+0x50>
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	08 95       	ret

00000d12 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	f8 2e       	mov	r15, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     d2e:	00 ed       	ldi	r16, 0xD0	; 208
     d30:	17 e0       	ldi	r17, 0x07	; 7
     d32:	c8 01       	movw	r24, r16
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_sendCommand+0x22>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	62 e0       	ldi	r22, 0x02	; 2
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     d42:	c8 01       	movw	r24, r16
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_sendCommand+0x32>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	6f 2d       	mov	r22, r15
     d4c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     d50:	c8 01       	movw	r24, r16
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <LCD_sendCommand+0x40>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     d60:	c8 01       	movw	r24, r16
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <LCD_sendCommand+0x50>
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	08 95       	ret

00000d6e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
	while((*Str) != '\0')
     d7a:	18 81       	ld	r17, Y
     d7c:	11 23       	and	r17, r17
     d7e:	61 f1       	breq	.+88     	; 0xdd8 <LCD_displayString+0x6a>
     d80:	80 ed       	ldi	r24, 0xD0	; 208
     d82:	e8 2e       	mov	r14, r24
     d84:	87 e0       	ldi	r24, 0x07	; 7
     d86:	f8 2e       	mov	r15, r24
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     d9c:	c7 01       	movw	r24, r14
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <LCD_displayString+0x30>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     dac:	c7 01       	movw	r24, r14
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <LCD_displayString+0x40>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	61 2f       	mov	r22, r17
     db6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     dba:	c7 01       	movw	r24, r14
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <LCD_displayString+0x4e>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     dca:	c7 01       	movw	r24, r14
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <LCD_displayString+0x5e>
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
		Str++;
     dd0:	21 96       	adiw	r28, 0x01	; 1
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
     dd2:	18 81       	ld	r17, Y
     dd4:	11 23       	and	r17, r17
     dd6:	c1 f6       	brne	.-80     	; 0xd88 <LCD_displayString+0x1a>
	{
		LCD_displayCharacter(Str[i]);
		++i;
	}
	 *********************************************************/
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int num)
{
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	60 97       	sbiw	r28, 0x10	; 16
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
	   char buff[16]; /* String to hold the ascii result */
	   itoa(num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     e02:	8e 01       	movw	r16, r28
     e04:	0f 5f       	subi	r16, 0xFF	; 255
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	b8 01       	movw	r22, r16
     e0a:	4a e0       	ldi	r20, 0x0A	; 10
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	0e 94 30 0b 	call	0x1660	; 0x1660 <itoa>
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
     e12:	d9 80       	ldd	r13, Y+1	; 0x01
     e14:	dd 20       	and	r13, r13
     e16:	71 f1       	breq	.+92     	; 0xe74 <LCD_intgerToString+0x90>
     e18:	90 ed       	ldi	r25, 0xD0	; 208
     e1a:	e9 2e       	mov	r14, r25
     e1c:	97 e0       	ldi	r25, 0x07	; 7
     e1e:	f9 2e       	mov	r15, r25
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     e34:	c7 01       	movw	r24, r14
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_intgerToString+0x52>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     e44:	c7 01       	movw	r24, r14
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <LCD_intgerToString+0x62>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	6d 2d       	mov	r22, r13
     e4e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     e52:	c7 01       	movw	r24, r14
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <LCD_intgerToString+0x70>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     e62:	c7 01       	movw	r24, r14
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <LCD_intgerToString+0x80>
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
		Str++;
     e68:	0f 5f       	subi	r16, 0xFF	; 255
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
     e6c:	f8 01       	movw	r30, r16
     e6e:	d0 80       	ld	r13, Z
     e70:	dd 20       	and	r13, r13
     e72:	b1 f6       	brne	.-84     	; 0xe20 <LCD_intgerToString+0x3c>
void LCD_intgerToString(int num)
{
	   char buff[16]; /* String to hold the ascii result */
	   itoa(num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	   LCD_displayString(buff); /* Display the string */
}
     e74:	60 96       	adiw	r28, 0x10	; 16
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	08 95       	ret

00000e90 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
     e90:	0f 93       	push	r16
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	a9 f1       	breq	.+106    	; 0xf00 <LCD_moveCursor+0x70>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	60 f5       	brcc	.+88     	; 0xef2 <LCD_moveCursor+0x62>
     e9a:	06 2f       	mov	r16, r22
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     eb0:	80 ed       	ldi	r24, 0xD0	; 208
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <LCD_moveCursor+0x24>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	41 e0       	ldi	r20, 0x01	; 1
     ebe:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     ec2:	80 ed       	ldi	r24, 0xD0	; 208
     ec4:	97 e0       	ldi	r25, 0x07	; 7
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <LCD_moveCursor+0x36>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
     eca:	00 68       	ori	r16, 0x80	; 128
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	60 2f       	mov	r22, r16
     ed0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     ed4:	80 ed       	ldi	r24, 0xD0	; 208
     ed6:	97 e0       	ldi	r25, 0x07	; 7
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <LCD_moveCursor+0x48>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	62 e0       	ldi	r22, 0x02	; 2
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     ee6:	80 ed       	ldi	r24, 0xD0	; 208
     ee8:	97 e0       	ldi	r25, 0x07	; 7
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <LCD_moveCursor+0x5a>
	case 3:
		lcd_memory_address=col+0x50;	break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
}
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	41 f0       	breq	.+16     	; 0xf06 <LCD_moveCursor+0x76>
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	89 f6       	brne	.-94     	; 0xe9c <LCD_moveCursor+0xc>
	case 1:
		lcd_memory_address=col+0x40;	break;
	case 2:
		lcd_memory_address=col+0x10;	break;
	case 3:
		lcd_memory_address=col+0x50;	break;
     efa:	06 2f       	mov	r16, r22
     efc:	00 5b       	subi	r16, 0xB0	; 176
     efe:	ce cf       	rjmp	.-100    	; 0xe9c <LCD_moveCursor+0xc>
	switch(row)
	{
	case 0:
		lcd_memory_address=col;			break;
	case 1:
		lcd_memory_address=col+0x40;	break;
     f00:	06 2f       	mov	r16, r22
     f02:	00 5c       	subi	r16, 0xC0	; 192
     f04:	cb cf       	rjmp	.-106    	; 0xe9c <LCD_moveCursor+0xc>
	case 2:
		lcd_memory_address=col+0x10;	break;
     f06:	06 2f       	mov	r16, r22
     f08:	00 5f       	subi	r16, 0xF0	; 240
     f0a:	c8 cf       	rjmp	.-112    	; 0xe9c <LCD_moveCursor+0xc>

00000f0c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     f24:	00 ed       	ldi	r16, 0xD0	; 208
     f26:	17 e0       	ldi	r17, 0x07	; 7
     f28:	c8 01       	movw	r24, r16
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <LCD_clearScreen+0x1e>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     f38:	c8 01       	movw	r24, r16
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <LCD_clearScreen+0x2e>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     f46:	c8 01       	movw	r24, r16
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <LCD_clearScreen+0x3c>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	62 e0       	ldi	r22, 0x02	; 2
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     f56:	c8 01       	movw	r24, r16
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <LCD_clearScreen+0x4c>
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
}
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 73 04 	call	0x8e6	; 0x8e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 73 04 	call	0x8e6	; 0x8e6 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	0e 94 8b 05 	call	0xb16	; 0xb16 <GPIO_setupPortDirection>
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     fa0:	00 ed       	ldi	r16, 0xD0	; 208
     fa2:	17 e0       	ldi	r17, 0x07	; 7
     fa4:	c8 01       	movw	r24, r16
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <LCD_init+0x44>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	62 e0       	ldi	r22, 0x02	; 2
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     fb4:	c8 01       	movw	r24, r16
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <LCD_init+0x54>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	68 e3       	ldi	r22, 0x38	; 56
     fbe:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
     fc2:	c8 01       	movw	r24, r16
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <LCD_init+0x62>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     fd2:	c8 01       	movw	r24, r16
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <LCD_init+0x72>
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     fec:	c8 01       	movw	r24, r16
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_init+0x8c>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
     ffc:	c8 01       	movw	r24, r16
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <LCD_init+0x9c>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	6c e0       	ldi	r22, 0x0C	; 12
    1006:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
    100a:	c8 01       	movw	r24, r16
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <LCD_init+0xaa>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    101a:	c8 01       	movw	r24, r16
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <LCD_init+0xba>
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    1034:	c8 01       	movw	r24, r16
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <LCD_init+0xd4>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    1044:	c8 01       	movw	r24, r16
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCD_init+0xe4>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
    1052:	c8 01       	movw	r24, r16
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCD_init+0xf2>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    1062:	c8 01       	movw	r24, r16
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_init+0x102>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);		/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */

	LCD_sendCommand(LCD_CURSOR_OFF);					/* cursor off */

	LCD_sendCommand(LCD_CLEAR_COMMAND);					/* clear LCD at the beginning */
}
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	7a 01       	movw	r14, r20
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	09 f4       	brne	.+2      	; 0x1082 <LCD_displayStringRowColumn+0x14>
    1080:	6d c0       	rjmp	.+218    	; 0x115c <LCD_displayStringRowColumn+0xee>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	08 f0       	brcs	.+2      	; 0x1088 <LCD_displayStringRowColumn+0x1a>
    1086:	62 c0       	rjmp	.+196    	; 0x114c <LCD_displayStringRowColumn+0xde>
    1088:	16 2f       	mov	r17, r22
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    109e:	80 ed       	ldi	r24, 0xD0	; 208
    10a0:	97 e0       	ldi	r25, 0x07	; 7
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_displayStringRowColumn+0x34>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    10b0:	80 ed       	ldi	r24, 0xD0	; 208
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <LCD_displayStringRowColumn+0x46>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    10b8:	10 68       	ori	r17, 0x80	; 128
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	61 2f       	mov	r22, r17
    10be:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
    10c2:	80 ed       	ldi	r24, 0xD0	; 208
    10c4:	97 e0       	ldi	r25, 0x07	; 7
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <LCD_displayStringRowColumn+0x58>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    10d4:	80 ed       	ldi	r24, 0xD0	; 208
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <LCD_displayStringRowColumn+0x6a>
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    10dc:	f7 01       	movw	r30, r14
    10de:	00 81       	ld	r16, Z
    10e0:	00 23       	and	r16, r16
    10e2:	69 f1       	breq	.+90     	; 0x113e <LCD_displayStringRowColumn+0xd0>
    10e4:	c0 ed       	ldi	r28, 0xD0	; 208
    10e6:	d7 e0       	ldi	r29, 0x07	; 7
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <LCD_displayStringRowColumn+0x90>
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	62 e0       	ldi	r22, 0x02	; 2
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    110c:	ce 01       	movw	r24, r28
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <LCD_displayStringRowColumn+0xa0>
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	60 2f       	mov	r22, r16
    1116:	0e 94 9e 05 	call	0xb3c	; 0xb3c <GPIO_writePort>
    111a:	ce 01       	movw	r24, r28
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <LCD_displayStringRowColumn+0xae>
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	62 e0       	ldi	r22, 0x02	; 2
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GPIO_writePin>
    112a:	ce 01       	movw	r24, r28
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <LCD_displayStringRowColumn+0xbe>
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
		Str++;
    1130:	08 94       	sec
    1132:	e1 1c       	adc	r14, r1
    1134:	f1 1c       	adc	r15, r1
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    1136:	f7 01       	movw	r30, r14
    1138:	00 81       	ld	r16, Z
    113a:	00 23       	and	r16, r16
    113c:	a9 f6       	brne	.-86     	; 0x10e8 <LCD_displayStringRowColumn+0x7a>
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); 		/* go to to the required LCD position */
	LCD_displayString(Str); 		/* display the string */
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	08 95       	ret
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	49 f0       	breq	.+18     	; 0x1162 <LCD_displayStringRowColumn+0xf4>
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	09 f0       	breq	.+2      	; 0x1156 <LCD_displayStringRowColumn+0xe8>
    1154:	9a cf       	rjmp	.-204    	; 0x108a <LCD_displayStringRowColumn+0x1c>
	case 1:
		lcd_memory_address=col+0x40;	break;
	case 2:
		lcd_memory_address=col+0x10;	break;
	case 3:
		lcd_memory_address=col+0x50;	break;
    1156:	16 2f       	mov	r17, r22
    1158:	10 5b       	subi	r17, 0xB0	; 176
    115a:	97 cf       	rjmp	.-210    	; 0x108a <LCD_displayStringRowColumn+0x1c>
	switch(row)
	{
	case 0:
		lcd_memory_address=col;			break;
	case 1:
		lcd_memory_address=col+0x40;	break;
    115c:	16 2f       	mov	r17, r22
    115e:	10 5c       	subi	r17, 0xC0	; 192
    1160:	94 cf       	rjmp	.-216    	; 0x108a <LCD_displayStringRowColumn+0x1c>
	case 2:
		lcd_memory_address=col+0x10;	break;
    1162:	16 2f       	mov	r17, r22
    1164:	10 5f       	subi	r17, 0xF0	; 240
    1166:	91 cf       	rjmp	.-222    	; 0x108a <LCD_displayStringRowColumn+0x1c>

00001168 <__vector_9>:
 *                                	Interrupt Service Routine                                      *
 ***************************************************************************************************/

/*	Timer0 callback function for overflow mode*/
ISR(TIMER0_OVF_vect)
{
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	4f 93       	push	r20
    1178:	5f 93       	push	r21
    117a:	6f 93       	push	r22
    117c:	7f 93       	push	r23
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	ef 93       	push	r30
    1188:	ff 93       	push	r31
	if (g_Timer0_callBackPtr != NULL_PTR)
    118a:	e0 91 4c 01 	lds	r30, 0x014C
    118e:	f0 91 4d 01 	lds	r31, 0x014D
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	09 f0       	breq	.+2      	; 0x1198 <__vector_9+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    1196:	09 95       	icall
	}
}
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_19>:

/*	Timer0 callback function for compare mode*/
ISR(TIMER0_COMP_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
	if (g_Timer0_callBackPtr != NULL_PTR)
    11dc:	e0 91 4c 01 	lds	r30, 0x014C
    11e0:	f0 91 4d 01 	lds	r31, 0x014D
    11e4:	30 97       	sbiw	r30, 0x00	; 0
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__vector_19+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    11e8:	09 95       	icall
	}
}
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_8>:

/*	Timer1 callback function for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
	if (g_Timer1_callBackPtr != NULL_PTR)
    122e:	e0 91 4e 01 	lds	r30, 0x014E
    1232:	f0 91 4f 01 	lds	r31, 0x014F
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	09 f0       	breq	.+2      	; 0x123c <__vector_8+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    123a:	09 95       	icall
	}
}
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_6>:

/*	Timer1 callback function for compare (A) mode*/
ISR(TIMER1_COMPA_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	if (g_Timer1_callBackPtr != NULL_PTR)
    1280:	e0 91 4e 01 	lds	r30, 0x014E
    1284:	f0 91 4f 01 	lds	r31, 0x014F
    1288:	30 97       	sbiw	r30, 0x00	; 0
    128a:	09 f0       	breq	.+2      	; 0x128e <__vector_6+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    128c:	09 95       	icall
	}
}
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_7>:

/*	Timer1 callback function for compare (B) mode*/
ISR(TIMER1_COMPB_vect)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (g_Timer1_callBackPtr != NULL_PTR)
    12d2:	e0 91 4e 01 	lds	r30, 0x014E
    12d6:	f0 91 4f 01 	lds	r31, 0x014F
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_7+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    12de:	09 95       	icall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_4>:

/*	Timer2 callback function for overflow mode*/
ISR(TIMER2_OVF_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
	if (g_Timer2_callBackPtr != NULL_PTR)
    1324:	e0 91 50 01 	lds	r30, 0x0150
    1328:	f0 91 51 01 	lds	r31, 0x0151
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	09 f0       	breq	.+2      	; 0x1332 <__vector_4+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    1330:	09 95       	icall
	}
}
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_3>:

/*	Timer2 callback function for compare mode*/
ISR(TIMER2_COMP_vect)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
	if (g_Timer2_callBackPtr != NULL_PTR)
    1376:	e0 91 50 01 	lds	r30, 0x0150
    137a:	f0 91 51 01 	lds	r31, 0x0151
    137e:	30 97       	sbiw	r30, 0x00	; 0
    1380:	09 f0       	breq	.+2      	; 0x1384 <__vector_3+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    1382:	09 95       	icall
	}
}
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <Timer_init>:
 * 4- Compare Value: 		0 -> 255 (Timer0/Timer2) and 0 -> 65535 (Timer1)
 * 5- Timerx Source:		Choose from (No Clock/ Pre-scalar / External Clock)
 * 6- Timer Compare Match:	Choose from (No OCx, Toggle OCx, Clear OCx, Set OCx)	[Only for compare mode]
 */
void Timer_init(const Timer_ConfigType* Config_Ptr)
{
    13a6:	fc 01       	movw	r30, r24
	switch (Config_Ptr->Timerx_ID)
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	51 f1       	breq	.+84     	; 0x1402 <Timer_init+0x5c>
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	90 f4       	brcc	.+36     	; 0x13d6 <Timer_init+0x30>
	/**************************************************************************)*
	 *                                	Timer0                   	   			*
	 ****************************************************************************/
	case (TIMER0_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR0 = (1<<FOC0);
    13b2:	80 e8       	ldi	r24, 0x80	; 128
    13b4:	83 bf       	out	0x33, r24	; 51

	/* Set the start value */
	TCNT0 = Config_Ptr->Start_value;
    13b6:	80 81       	ld	r24, Z
    13b8:	82 bf       	out	0x32, r24	; 50

	/* Set the pre-scalar or timer source */
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->Timer_Source << CS00);
    13ba:	83 b7       	in	r24, 0x33	; 51
    13bc:	88 7f       	andi	r24, 0xF8	; 248
    13be:	96 81       	ldd	r25, Z+6	; 0x06
    13c0:	89 2b       	or	r24, r25
    13c2:	83 bf       	out	0x33, r24	; 51

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    13c4:	85 81       	ldd	r24, Z+5	; 0x05
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	89 f1       	breq	.+98     	; 0x142c <Timer_init+0x86>
		TCCR0 = (TCCR0 & 0xB7) | (1<<WGM01);			/* Clears WGM00 and Set WGM01*/
		TCCR0 = (TCCR0 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM00);
		OCR0  = Config_Ptr->Compare_value;
		TIMSK |= (1<<OCIE0);								/* Enable Timer0 compare interrupt */
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    13ca:	88 23       	and	r24, r24
    13cc:	31 f4       	brne	.+12     	; 0x13da <Timer_init+0x34>
	{
		TIMSK |= (1<<TOIE0);								/* Enable Timer0 overflow interrupt */
    13ce:	89 b7       	in	r24, 0x39	; 57
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	89 bf       	out	0x39, r24	; 57
    13d4:	08 95       	ret
 * 5- Timerx Source:		Choose from (No Clock/ Pre-scalar / External Clock)
 * 6- Timer Compare Match:	Choose from (No OCx, Toggle OCx, Clear OCx, Set OCx)	[Only for compare mode]
 */
void Timer_init(const Timer_ConfigType* Config_Ptr)
{
	switch (Config_Ptr->Timerx_ID)
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	09 f0       	breq	.+2      	; 0x13dc <Timer_init+0x36>
    13da:	08 95       	ret
	/**************************************************************************)*
	 *                                	Timer2                   	   			*
	 ****************************************************************************/
	case (TIMER2_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR2 = (1<<FOC2);
    13dc:	80 e8       	ldi	r24, 0x80	; 128
    13de:	85 bd       	out	0x25, r24	; 37

	/* Set the start value */
	TCNT2 = Config_Ptr->Start_value;
    13e0:	80 81       	ld	r24, Z
    13e2:	84 bd       	out	0x24, r24	; 36

	/* Set the pre-scalar or timer source */
	TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->Timer_Source << CS20);
    13e4:	85 b5       	in	r24, 0x25	; 37
    13e6:	88 7f       	andi	r24, 0xF8	; 248
    13e8:	96 81       	ldd	r25, Z+6	; 0x06
    13ea:	89 2b       	or	r24, r25
    13ec:	85 bd       	out	0x25, r24	; 37

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    13ee:	85 81       	ldd	r24, Z+5	; 0x05
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <Timer_init+0x50>
    13f4:	41 c0       	rjmp	.+130    	; 0x1478 <Timer_init+0xd2>
		TCCR2 = (TCCR2 & 0xB7) | (1<<WGM21);			/* Clears WGM20 and Set WGM21*/
		TCCR2 = (TCCR2 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM20);
		OCR2  = Config_Ptr->Compare_value;
		TIMSK |= (1<<OCIE2);								/* Enable Timer2 compare interrupt */
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    13f6:	88 23       	and	r24, r24
    13f8:	81 f7       	brne	.-32     	; 0x13da <Timer_init+0x34>
	{
		TIMSK |= (1<<TOIE2);								/* Enable Timer2 overflow interrupt */
    13fa:	89 b7       	in	r24, 0x39	; 57
    13fc:	80 64       	ori	r24, 0x40	; 64
    13fe:	89 bf       	out	0x39, r24	; 57
    1400:	08 95       	ret
	/**************************************************************************)*
	 *                                	Timer1                   	   			*
	 ****************************************************************************/
	case (TIMER1_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    1402:	8f b5       	in	r24, 0x2f	; 47
    1404:	8c 60       	ori	r24, 0x0C	; 12
    1406:	8f bd       	out	0x2f, r24	; 47

	/* Set the start value */
	TCNT1 = Config_Ptr->Start_value;
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	9d bd       	out	0x2d, r25	; 45
    140e:	8c bd       	out	0x2c, r24	; 44

	/* Set the pre-scalar or timer source */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Timer_Source << CS10);
    1410:	8e b5       	in	r24, 0x2e	; 46
    1412:	88 7f       	andi	r24, 0xF8	; 248
    1414:	96 81       	ldd	r25, Z+6	; 0x06
    1416:	89 2b       	or	r24, r25
    1418:	8e bd       	out	0x2e, r24	; 46

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    141a:	85 81       	ldd	r24, Z+5	; 0x05
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	b9 f0       	breq	.+46     	; 0x144e <Timer_init+0xa8>
		TCCR1B = (TCCR1B & 0xE7) | (1<<WGM12);				/* Clears WGM13 and Set WGM12 (Mode 4 CTC)*/
		TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->Timer_Compare_Match << COM1A0);
		OCR1A  = Config_Ptr->Compare_value;
		TIMSK |= (1<<OCIE1A);								/* Enable Timer1 compare interrupt */
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    1420:	88 23       	and	r24, r24
    1422:	d9 f6       	brne	.-74     	; 0x13da <Timer_init+0x34>
	{
		TIMSK |= (1<<TOIE1);								/* Enable Timer1 overflow interrupt */
    1424:	89 b7       	in	r24, 0x39	; 57
    1426:	84 60       	ori	r24, 0x04	; 4
    1428:	89 bf       	out	0x39, r24	; 57
    142a:	08 95       	ret
	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
	{
		TCCR0 = (TCCR0 & 0xB7) | (1<<WGM01);			/* Clears WGM00 and Set WGM01*/
    142c:	83 b7       	in	r24, 0x33	; 51
    142e:	87 7b       	andi	r24, 0xB7	; 183
    1430:	88 60       	ori	r24, 0x08	; 8
    1432:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM00);
    1434:	93 b7       	in	r25, 0x33	; 51
    1436:	87 81       	ldd	r24, Z+7	; 0x07
    1438:	82 95       	swap	r24
    143a:	80 7f       	andi	r24, 0xF0	; 240
    143c:	9f 7c       	andi	r25, 0xCF	; 207
    143e:	89 2b       	or	r24, r25
    1440:	83 bf       	out	0x33, r24	; 51
		OCR0  = Config_Ptr->Compare_value;
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	8c bf       	out	0x3c, r24	; 60
		TIMSK |= (1<<OCIE0);								/* Enable Timer0 compare interrupt */
    1446:	89 b7       	in	r24, 0x39	; 57
    1448:	82 60       	ori	r24, 0x02	; 2
    144a:	89 bf       	out	0x39, r24	; 57
    144c:	08 95       	ret
	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
	{
		TCCR1B = (TCCR1B & 0xE7) | (1<<WGM12);				/* Clears WGM13 and Set WGM12 (Mode 4 CTC)*/
    144e:	8e b5       	in	r24, 0x2e	; 46
    1450:	87 7e       	andi	r24, 0xE7	; 231
    1452:	88 60       	ori	r24, 0x08	; 8
    1454:	8e bd       	out	0x2e, r24	; 46
		TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->Timer_Compare_Match << COM1A0);
    1456:	9f b5       	in	r25, 0x2f	; 47
    1458:	87 81       	ldd	r24, Z+7	; 0x07
    145a:	82 95       	swap	r24
    145c:	88 0f       	add	r24, r24
    145e:	88 0f       	add	r24, r24
    1460:	80 7c       	andi	r24, 0xC0	; 192
    1462:	9f 73       	andi	r25, 0x3F	; 63
    1464:	89 2b       	or	r24, r25
    1466:	8f bd       	out	0x2f, r24	; 47
		OCR1A  = Config_Ptr->Compare_value;
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	9b bd       	out	0x2b, r25	; 43
    146e:	8a bd       	out	0x2a, r24	; 42
		TIMSK |= (1<<OCIE1A);								/* Enable Timer1 compare interrupt */
    1470:	89 b7       	in	r24, 0x39	; 57
    1472:	80 61       	ori	r24, 0x10	; 16
    1474:	89 bf       	out	0x39, r24	; 57
    1476:	08 95       	ret
	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
	{
		TCCR2 = (TCCR2 & 0xB7) | (1<<WGM21);			/* Clears WGM20 and Set WGM21*/
    1478:	85 b5       	in	r24, 0x25	; 37
    147a:	87 7b       	andi	r24, 0xB7	; 183
    147c:	88 60       	ori	r24, 0x08	; 8
    147e:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM20);
    1480:	95 b5       	in	r25, 0x25	; 37
    1482:	87 81       	ldd	r24, Z+7	; 0x07
    1484:	82 95       	swap	r24
    1486:	80 7f       	andi	r24, 0xF0	; 240
    1488:	9f 7c       	andi	r25, 0xCF	; 207
    148a:	89 2b       	or	r24, r25
    148c:	85 bd       	out	0x25, r24	; 37
		OCR2  = Config_Ptr->Compare_value;
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	83 bd       	out	0x23, r24	; 35
		TIMSK |= (1<<OCIE2);								/* Enable Timer2 compare interrupt */
    1492:	89 b7       	in	r24, 0x39	; 57
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	89 bf       	out	0x39, r24	; 57
    1498:	08 95       	ret

0000149a <Timer_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(Timer_ID timer_ID, void(*a_ptr)(void))
{
	if(timer_ID == TIMER0_ID)
    149a:	88 23       	and	r24, r24
    149c:	29 f0       	breq	.+10     	; 0x14a8 <Timer_setCallBack+0xe>
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_Timer0_callBackPtr = a_ptr;
	}
	else if(timer_ID == TIMER1_ID)
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	41 f0       	breq	.+16     	; 0x14b2 <Timer_setCallBack+0x18>
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_Timer1_callBackPtr = a_ptr;
	}
	else if(timer_ID == TIMER2_ID)
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	59 f0       	breq	.+22     	; 0x14bc <Timer_setCallBack+0x22>
    14a6:	08 95       	ret
void Timer_setCallBack(Timer_ID timer_ID, void(*a_ptr)(void))
{
	if(timer_ID == TIMER0_ID)
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_Timer0_callBackPtr = a_ptr;
    14a8:	70 93 4d 01 	sts	0x014D, r23
    14ac:	60 93 4c 01 	sts	0x014C, r22
    14b0:	08 95       	ret
	}
	else if(timer_ID == TIMER1_ID)
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_Timer1_callBackPtr = a_ptr;
    14b2:	70 93 4f 01 	sts	0x014F, r23
    14b6:	60 93 4e 01 	sts	0x014E, r22
    14ba:	08 95       	ret
	}
	else if(timer_ID == TIMER2_ID)
	{
		/* Save the address of the Call back function in a global variable of Timer2 */
		g_Timer2_callBackPtr = a_ptr;
    14bc:	70 93 51 01 	sts	0x0151, r23
    14c0:	60 93 50 01 	sts	0x0150, r22
    14c4:	08 95       	ret

000014c6 <Timer_deinit>:
 * Description :
 * De-Initialize the Timerx for the chosen timer (TIMER0_ID / TIMER1_ID / TIMER2_ID)
 */
void Timer_deinit(Timer_ID timer_ID)
{
	if(timer_ID == TIMER0_ID)				/* De-initialize Timer0 */
    14c6:	88 23       	and	r24, r24
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <Timer_deinit+0xe>
		TCNT1 = 0;
		TIMSK &= ~(1<<TOIE0);
		TIMSK &= ~(1<<OCIE0);
	}

	else if(timer_ID == TIMER1_ID)			/* De-initialize Timer1 */
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <Timer_deinit+0x22>
		TIMSK &= ~(1<<TOIE1);
		TIMSK &= ~(1<<OCIE1A);
		TIMSK &= ~(1<<OCIE1B);
	}

	else if(timer_ID == TIMER2_ID)			/* De-initialize Timer2 */
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	c9 f0       	breq	.+50     	; 0x1504 <Timer_deinit+0x3e>
    14d2:	08 95       	ret
 */
void Timer_deinit(Timer_ID timer_ID)
{
	if(timer_ID == TIMER0_ID)				/* De-initialize Timer0 */
	{
		TCCR0 = 0;
    14d4:	13 be       	out	0x33, r1	; 51
		TCNT1 = 0;
    14d6:	1d bc       	out	0x2d, r1	; 45
    14d8:	1c bc       	out	0x2c, r1	; 44
		TIMSK &= ~(1<<TOIE0);
    14da:	89 b7       	in	r24, 0x39	; 57
    14dc:	8e 7f       	andi	r24, 0xFE	; 254
    14de:	89 bf       	out	0x39, r24	; 57
		TIMSK &= ~(1<<OCIE0);
    14e0:	89 b7       	in	r24, 0x39	; 57
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	89 bf       	out	0x39, r24	; 57
    14e6:	08 95       	ret
	}

	else if(timer_ID == TIMER1_ID)			/* De-initialize Timer1 */
	{
		TCCR1A = 0;
    14e8:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
    14ea:	1e bc       	out	0x2e, r1	; 46
		TCNT1 = 0;
    14ec:	1d bc       	out	0x2d, r1	; 45
    14ee:	1c bc       	out	0x2c, r1	; 44
		TIMSK &= ~(1<<TOIE1);
    14f0:	89 b7       	in	r24, 0x39	; 57
    14f2:	8b 7f       	andi	r24, 0xFB	; 251
    14f4:	89 bf       	out	0x39, r24	; 57
		TIMSK &= ~(1<<OCIE1A);
    14f6:	89 b7       	in	r24, 0x39	; 57
    14f8:	8f 7e       	andi	r24, 0xEF	; 239
    14fa:	89 bf       	out	0x39, r24	; 57
		TIMSK &= ~(1<<OCIE1B);
    14fc:	89 b7       	in	r24, 0x39	; 57
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	89 bf       	out	0x39, r24	; 57
    1502:	08 95       	ret
	}

	else if(timer_ID == TIMER2_ID)			/* De-initialize Timer2 */
	{
		TCCR2 = 0;
    1504:	15 bc       	out	0x25, r1	; 37
		TCNT2 = 0;
    1506:	14 bc       	out	0x24, r1	; 36
		TIMSK &= ~(1<<TOIE2);
    1508:	89 b7       	in	r24, 0x39	; 57
    150a:	8f 7b       	andi	r24, 0xBF	; 191
    150c:	89 bf       	out	0x39, r24	; 57
		TIMSK &= ~(1<<OCIE2);
    150e:	89 b7       	in	r24, 0x39	; 57
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	89 bf       	out	0x39, r24	; 57
    1514:	08 95       	ret

00001516 <Timer_SetStartValue>:
/*
 * Description: Function to set the Initial value of selected timer.
 */
void Timer_SetStartValue(Timer_ID timer_ID, uint16 start_value)
{
	if(timer_ID == TIMER0_ID)			/* Set initial value for Timer0 */
    1516:	88 23       	and	r24, r24
    1518:	29 f0       	breq	.+10     	; 0x1524 <Timer_SetStartValue+0xe>
	{
		TCNT0 = start_value;
	}

	else if(timer_ID == TIMER1_ID)			/* Set initial value for Timer1 */
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	29 f0       	breq	.+10     	; 0x1528 <Timer_SetStartValue+0x12>
	{
		TCNT1 = start_value;
	}

	else if(timer_ID == TIMER2_ID)			/* Set initial value for Timer2 */
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	31 f0       	breq	.+12     	; 0x152e <Timer_SetStartValue+0x18>
    1522:	08 95       	ret
 */
void Timer_SetStartValue(Timer_ID timer_ID, uint16 start_value)
{
	if(timer_ID == TIMER0_ID)			/* Set initial value for Timer0 */
	{
		TCNT0 = start_value;
    1524:	62 bf       	out	0x32, r22	; 50
    1526:	08 95       	ret
	}

	else if(timer_ID == TIMER1_ID)			/* Set initial value for Timer1 */
	{
		TCNT1 = start_value;
    1528:	7d bd       	out	0x2d, r23	; 45
    152a:	6c bd       	out	0x2c, r22	; 44
    152c:	08 95       	ret
	}

	else if(timer_ID == TIMER2_ID)			/* Set initial value for Timer2 */
	{
		TCNT2 = start_value;
    152e:	64 bd       	out	0x24, r22	; 36
    1530:	08 95       	ret

00001532 <Timer_SetCompareValue>:
/*
 * Description: Function to set the Compare Value of the selected timer.
 */
void Timer_SetCompareValue(Timer_ID timer_ID, uint16 compare_value)
{
	if(timer_ID == TIMER0_ID)			/* Set compare value for Timer0 */
    1532:	88 23       	and	r24, r24
    1534:	29 f0       	breq	.+10     	; 0x1540 <Timer_SetCompareValue+0xe>
	{
		OCR0 = compare_value;
	}

	else if(timer_ID == TIMER1_ID)			/* Set compare value for Timer1 */
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	29 f0       	breq	.+10     	; 0x1544 <Timer_SetCompareValue+0x12>
	{
		OCR1A = compare_value;
	}

	else if(timer_ID == TIMER2_ID)			/* Set compare value for Timer2 */
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	31 f0       	breq	.+12     	; 0x154a <Timer_SetCompareValue+0x18>
    153e:	08 95       	ret
 */
void Timer_SetCompareValue(Timer_ID timer_ID, uint16 compare_value)
{
	if(timer_ID == TIMER0_ID)			/* Set compare value for Timer0 */
	{
		OCR0 = compare_value;
    1540:	6c bf       	out	0x3c, r22	; 60
    1542:	08 95       	ret
	}

	else if(timer_ID == TIMER1_ID)			/* Set compare value for Timer1 */
	{
		OCR1A = compare_value;
    1544:	7b bd       	out	0x2b, r23	; 43
    1546:	6a bd       	out	0x2a, r22	; 42
    1548:	08 95       	ret
	}

	else if(timer_ID == TIMER2_ID)			/* Set compare value for Timer2 */
	{
		OCR2 = compare_value;
    154a:	63 bd       	out	0x23, r22	; 35
    154c:	08 95       	ret

0000154e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    154e:	fc 01       	movw	r30, r24
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
    1550:	59 9a       	sbi	0x0b, 1	; 11

	/* RXEN = 1 for Receiver Enable */
	SET_BIT(UCSRB,RXEN);
    1552:	54 9a       	sbi	0x0a, 4	; 10
	/* TXEN = 1 for Transmitter Enable */
	SET_BIT(UCSRB,TXEN);
    1554:	53 9a       	sbi	0x0a, 3	; 10

	/* URSEL = 1 to write on UCSRC shared register*/
	SET_BIT(UCSRC,URSEL);
    1556:	80 b5       	in	r24, 0x20	; 32
    1558:	80 68       	ori	r24, 0x80	; 128
    155a:	80 bd       	out	0x20, r24	; 32
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode)<<UPM0);
    155c:	90 b5       	in	r25, 0x20	; 32
    155e:	85 81       	ldd	r24, Z+5	; 0x05
    1560:	82 95       	swap	r24
    1562:	80 7f       	andi	r24, 0xF0	; 240
    1564:	9f 7c       	andi	r25, 0xCF	; 207
    1566:	89 2b       	or	r24, r25
    1568:	80 bd       	out	0x20, r24	; 32
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopBits)<<USBS);
    156a:	90 b5       	in	r25, 0x20	; 32
    156c:	86 81       	ldd	r24, Z+6	; 0x06
    156e:	88 0f       	add	r24, r24
    1570:	88 0f       	add	r24, r24
    1572:	88 0f       	add	r24, r24
    1574:	97 7f       	andi	r25, 0xF7	; 247
    1576:	89 2b       	or	r24, r25
    1578:	80 bd       	out	0x20, r24	; 32
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->DataBits)<<UCSZ0);
    157a:	90 b5       	in	r25, 0x20	; 32
    157c:	84 81       	ldd	r24, Z+4	; 0x04
    157e:	88 0f       	add	r24, r24
    1580:	99 7f       	andi	r25, 0xF9	; 249
    1582:	89 2b       	or	r24, r25
    1584:	80 bd       	out	0x20, r24	; 32

	/* URSEL = 0 to write on UBRRH shared register*/
	CLEAR_BIT(UBRRH,URSEL);
    1586:	80 b5       	in	r24, 0x20	; 32
    1588:	8f 77       	andi	r24, 0x7F	; 127
    158a:	80 bd       	out	0x20, r24	; 32
	/* Calculate the UBRR register value */
	uint16 Baudrate_value = (uint16)(((F_CPU/((Config_Ptr->BaudRate) * 8UL)))-1);
    158c:	20 81       	ld	r18, Z
    158e:	31 81       	ldd	r19, Z+1	; 0x01
    1590:	42 81       	ldd	r20, Z+2	; 0x02
    1592:	53 81       	ldd	r21, Z+3	; 0x03
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	44 1f       	adc	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	44 1f       	adc	r20, r20
    15a2:	55 1f       	adc	r21, r21
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	44 1f       	adc	r20, r20
    15aa:	55 1f       	adc	r21, r21
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	72 e1       	ldi	r23, 0x12	; 18
    15b0:	8a e7       	ldi	r24, 0x7A	; 122
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodsi4>
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	30 40       	sbci	r19, 0x00	; 0
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Baudrate_value>>8);
    15bc:	30 bd       	out	0x20, r19	; 32
	UBRRL = Baudrate_value;
    15be:	29 b9       	out	0x09, r18	; 9

}
    15c0:	08 95       	ret

000015c2 <UART_sendByte>:
{
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    15c2:	5d 9b       	sbis	0x0b, 5	; 11
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <UART_sendByte>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    15c6:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    15c8:	08 95       	ret

000015ca <UART_receiveByte>:
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC)){}
    15ca:	5f 9b       	sbis	0x0b, 7	; 11
    15cc:	fe cf       	rjmp	.-4      	; 0x15ca <UART_receiveByte>

	/*
	 * Read the received data from the RX buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    15ce:	8c b1       	in	r24, 0x0c	; 12
}
    15d0:	08 95       	ret

000015d2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    15d2:	dc 01       	movw	r26, r24
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
    15d4:	ec 91       	ld	r30, X
    15d6:	ee 23       	and	r30, r30
    15d8:	59 f0       	breq	.+22     	; 0x15f0 <UART_sendString+0x1e>
    15da:	80 e0       	ldi	r24, 0x00	; 0
{
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    15dc:	5d 9b       	sbis	0x0b, 5	; 11
    15de:	fe cf       	rjmp	.-4      	; 0x15dc <UART_sendString+0xa>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    15e0:	ec b9       	out	0x0c, r30	; 12
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
    15e4:	fd 01       	movw	r30, r26
    15e6:	e8 0f       	add	r30, r24
    15e8:	f1 1d       	adc	r31, r1
    15ea:	e0 81       	ld	r30, Z
    15ec:	ee 23       	and	r30, r30
    15ee:	b1 f7       	brne	.-20     	; 0x15dc <UART_sendString+0xa>
    15f0:	08 95       	ret

000015f2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    15f2:	dc 01       	movw	r26, r24
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC)){}
    15f4:	5f 9b       	sbis	0x0b, 7	; 11
    15f6:	fe cf       	rjmp	.-4      	; 0x15f4 <UART_receiveString+0x2>

	/*
	 * Read the received data from the RX buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    15f8:	8c b1       	in	r24, 0x0c	; 12
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    15fa:	8c 93       	st	X, r24

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    15fc:	83 32       	cpi	r24, 0x23	; 35
    15fe:	61 f0       	breq	.+24     	; 0x1618 <UART_receiveString+0x26>
    1600:	90 e0       	ldi	r25, 0x00	; 0
	{
		i++;
    1602:	9f 5f       	subi	r25, 0xFF	; 255
		Str[i] = UART_receiveByte();
    1604:	fd 01       	movw	r30, r26
    1606:	e9 0f       	add	r30, r25
    1608:	f1 1d       	adc	r31, r1
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC)){}
    160a:	5f 9b       	sbis	0x0b, 7	; 11
    160c:	fe cf       	rjmp	.-4      	; 0x160a <UART_receiveString+0x18>

	/*
	 * Read the received data from the RX buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    160e:	8c b1       	in	r24, 0x0c	; 12

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_receiveByte();
    1610:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1612:	83 32       	cpi	r24, 0x23	; 35
    1614:	b1 f7       	brne	.-20     	; 0x1602 <UART_receiveString+0x10>
    1616:	df 01       	movw	r26, r30
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1618:	1c 92       	st	X, r1
}
    161a:	08 95       	ret

0000161c <__udivmodsi4>:
    161c:	a1 e2       	ldi	r26, 0x21	; 33
    161e:	1a 2e       	mov	r1, r26
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	fd 01       	movw	r30, r26
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <__udivmodsi4_ep>

00001628 <__udivmodsi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	ee 1f       	adc	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	a2 17       	cp	r26, r18
    1632:	b3 07       	cpc	r27, r19
    1634:	e4 07       	cpc	r30, r20
    1636:	f5 07       	cpc	r31, r21
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__udivmodsi4_ep>
    163a:	a2 1b       	sub	r26, r18
    163c:	b3 0b       	sbc	r27, r19
    163e:	e4 0b       	sbc	r30, r20
    1640:	f5 0b       	sbc	r31, r21

00001642 <__udivmodsi4_ep>:
    1642:	66 1f       	adc	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	1a 94       	dec	r1
    164c:	69 f7       	brne	.-38     	; 0x1628 <__udivmodsi4_loop>
    164e:	60 95       	com	r22
    1650:	70 95       	com	r23
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	bd 01       	movw	r22, r26
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret

00001660 <itoa>:
    1660:	fb 01       	movw	r30, r22
    1662:	9f 01       	movw	r18, r30
    1664:	e8 94       	clt
    1666:	42 30       	cpi	r20, 0x02	; 2
    1668:	c4 f0       	brlt	.+48     	; 0x169a <itoa+0x3a>
    166a:	45 32       	cpi	r20, 0x25	; 37
    166c:	b4 f4       	brge	.+44     	; 0x169a <itoa+0x3a>
    166e:	4a 30       	cpi	r20, 0x0A	; 10
    1670:	29 f4       	brne	.+10     	; 0x167c <itoa+0x1c>
    1672:	97 fb       	bst	r25, 7
    1674:	1e f4       	brtc	.+6      	; 0x167c <itoa+0x1c>
    1676:	90 95       	com	r25
    1678:	81 95       	neg	r24
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	64 2f       	mov	r22, r20
    167e:	77 27       	eor	r23, r23
    1680:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__udivmodhi4>
    1684:	80 5d       	subi	r24, 0xD0	; 208
    1686:	8a 33       	cpi	r24, 0x3A	; 58
    1688:	0c f0       	brlt	.+2      	; 0x168c <itoa+0x2c>
    168a:	89 5d       	subi	r24, 0xD9	; 217
    168c:	81 93       	st	Z+, r24
    168e:	cb 01       	movw	r24, r22
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 f7       	brne	.-24     	; 0x167c <itoa+0x1c>
    1694:	16 f4       	brtc	.+4      	; 0x169a <itoa+0x3a>
    1696:	5d e2       	ldi	r21, 0x2D	; 45
    1698:	51 93       	st	Z+, r21
    169a:	10 82       	st	Z, r1
    169c:	c9 01       	movw	r24, r18
    169e:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <strrev>

000016a2 <strrev>:
    16a2:	dc 01       	movw	r26, r24
    16a4:	fc 01       	movw	r30, r24
    16a6:	67 2f       	mov	r22, r23
    16a8:	71 91       	ld	r23, Z+
    16aa:	77 23       	and	r23, r23
    16ac:	e1 f7       	brne	.-8      	; 0x16a6 <strrev+0x4>
    16ae:	32 97       	sbiw	r30, 0x02	; 2
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <strrev+0x18>
    16b2:	7c 91       	ld	r23, X
    16b4:	6d 93       	st	X+, r22
    16b6:	70 83       	st	Z, r23
    16b8:	62 91       	ld	r22, -Z
    16ba:	ae 17       	cp	r26, r30
    16bc:	bf 07       	cpc	r27, r31
    16be:	c8 f3       	brcs	.-14     	; 0x16b2 <strrev+0x10>
    16c0:	08 95       	ret

000016c2 <__udivmodhi4>:
    16c2:	aa 1b       	sub	r26, r26
    16c4:	bb 1b       	sub	r27, r27
    16c6:	51 e1       	ldi	r21, 0x11	; 17
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <__udivmodhi4_ep>

000016ca <__udivmodhi4_loop>:
    16ca:	aa 1f       	adc	r26, r26
    16cc:	bb 1f       	adc	r27, r27
    16ce:	a6 17       	cp	r26, r22
    16d0:	b7 07       	cpc	r27, r23
    16d2:	10 f0       	brcs	.+4      	; 0x16d8 <__udivmodhi4_ep>
    16d4:	a6 1b       	sub	r26, r22
    16d6:	b7 0b       	sbc	r27, r23

000016d8 <__udivmodhi4_ep>:
    16d8:	88 1f       	adc	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	5a 95       	dec	r21
    16de:	a9 f7       	brne	.-22     	; 0x16ca <__udivmodhi4_loop>
    16e0:	80 95       	com	r24
    16e2:	90 95       	com	r25
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
